{
  "version": 3,
  "sources": ["../front/src/app.js"],
  "sourcesContent": ["// @ts-check\r\n\r\n// This is the starting point for the application.\r\n// This module starts executing as soon as parsing of the HTML has finished.\r\n// We will bootstrap the app and start the loading process for all components.\r\n// The module also exports to the global environment a set of functions and\r\n// variables which are useful for the rest of the modules without having to import.\r\n\r\n// For rendering the HTML in the pages\r\nimport { render, html, svg } from \"uhtml\";\r\n\r\n// Translation support\r\nimport \"./i18n/tr.js\";\r\n\r\n// The database operations\r\nimport { storage } from \"./components/db\";\r\n// @ts-ignore\r\nwindow.myerror = storage.myerror;\r\n\r\n// @ts-ignore\r\nwindow.mylog = storage.mylog;\r\n\r\n// Initialise the debug flag based on the current settings\r\nif (!localStorage.getItem(\"MHRdebug\")) {\r\n   localStorage.setItem(\"MHRdebug\", \"false\");\r\n}\r\n\r\nvar debug = localStorage.getItem(\"MHRdebug\") == \"true\";\r\nconsole.log(\"DEBUG\", debug);\r\n\r\n// Prepare for lazy-loading the pages composing the application.\r\n// Typically, the window.pageModules variable is set in the HTML page importing us, but\r\n// it could be overriden (manually) here. It has a structure like this:\r\n//\r\n// window.pageModules = {\r\n//     \"DisplayQR\": \"/pages/DisplayQR-PIO5OPZ6.js\",\r\n//     \"DisplayVC\": \"/pages/DisplayVC-7FJXVKLF.js\",\r\n//     \"LogsPage\": \"/pages/LogsPage-DHLVIEZ4.js\",\r\n//     \"MenuPage\": \"/pages/MenuPage-A455MOK2.js\",\r\n//     \"MicroWallet\": \"/pages/MicroWallet-FGPE6TBO.js\",\r\n//     \"AuthenticationRequestPage\": \"/pages/AuthenticationRequestPage-2XT6ESFD.js\",\r\n//     \"SWNotify\": \"/pages/SWNotify-GLIQS6YO.js\",\r\n//     \"ScanQrPage\": \"/pages/ScanQrPage-SMX7ETOS.js\",\r\n//     \"SelectCamera\": \"/pages/SelectCamera-PXJHLD5U.js\",\r\n// }\r\n\r\n// @ts-ignore\r\nconst pageModulesMap = window.pageModules;\r\n\r\n// Get the base path of the application in runtime\r\nconst parsedUrl = new URL(import.meta.url);\r\nconst fullPath = parsedUrl.pathname;\r\nconsole.log(\"Fullpath of app:\", fullPath);\r\nconst basePath = fullPath.substring(0, fullPath.lastIndexOf(\"/\"));\r\nconsole.log(\"Base path:\", basePath);\r\n\r\n// Prepend the base path of the application to each page module name\r\n// We do it only if the base path contains more than a '/', which means we are running under a base path\r\n// and the actual JavaScript modules should be loaded under that path\r\nif (basePath.length > 1) {\r\n   for (const path in pageModulesMap) {\r\n      pageModulesMap[path] = basePath + pageModulesMap[path];\r\n   }\r\n}\r\n\r\n// *****************************************************\r\n// This is a micro-router with just-enough functionality\r\n//\r\n// Implements gotoPage(pageName, pageData) and goHome()\r\n// *****************************************************\r\n\r\n\r\n// The default home page where to start and when refreshing the app is set\r\n// in the HTML page importing us in the window.homePage variable.\r\n// @ts-ignore\r\nvar homePage = window.homePage;\r\nif (!homePage) {\r\n   throw \"No homePage was set.\";\r\n}\r\n\r\n// @ts-ignore\r\nvar myAppTitle = window.myAppTitle;\r\n\r\n// The name of the page when we try to go to a non-existent page\r\nvar name404 = \"Page404\";\r\n\r\n// This will hold all pages in a (\"pageName\", pageClass) structure, to facilitate page routing\r\nvar pageNameToClass = new Map();\r\n\r\n/**\r\n * Register a new page name, associated to a class instance\r\n * @param {string} pageName\r\n * @param {any} classInstance\r\n */\r\nfunction route(pageName, classInstance) {\r\n   // Just populate the map\r\n   pageNameToClass.set(pageName, classInstance);\r\n}\r\n\r\n// Set the default home page for the application\r\n/**\r\n * @param {any} page\r\n */\r\nfunction setHomePage(page) {\r\n   homePage = page;\r\n}\r\n\r\nasync function goHome() {\r\n   if (homePage != undefined) {\r\n      await gotoPage(homePage, null);\r\n   }\r\n}\r\n\r\n// gotoPage transitions to the target page passing pageData object\r\n// It is up to the page to define the structure of pageData\r\n/**\r\n * @param {string} pageName\r\n * @param {any} pageData\r\n * @param {boolean} replace\r\n */\r\nasync function gotoPage(pageName, pageData, replace) {\r\n   mylog(\"Inside gotoPage:\", pageName);\r\n\r\n   // Catch any exceptions and present an error page in case of error\r\n   try {\r\n      // We load dynamically the page if it is not yet loaded\r\n      var pageClass = pageNameToClass.get(pageName);\r\n      if (!pageClass) {\r\n         // Try to load dynamically the page.\r\n         await import(pageModulesMap[pageName]);\r\n\r\n         // If pageName still does not exist, go to the 404 error page\r\n         // passing the target page name as pageData\r\n         if (!pageNameToClass.get(pageName)) {\r\n            myerror(\"Target page does not exist: \", pageName);\r\n            pageData = pageName;\r\n            pageName = name404;\r\n         }\r\n      }\r\n\r\n      if (!replace) {\r\n         // Create a new state in the browser history, to support the back button in the browser.\r\n         window.history.pushState({ pageName: pageName, pageData: pageData }, `${pageName}`);\r\n      }\r\n\r\n      // Process the page transition\r\n      await processPageEntered(pageNameToClass, pageName, pageData, false);\r\n   } catch (error) {\r\n      myerror(error);\r\n      // Show an error. The ErrorPage is preloaded so we don't need to dynamically import it\r\n      await processPageEntered(\r\n         pageNameToClass,\r\n         \"ErrorPage\",\r\n         { title: error.name, msg: error.message },\r\n         false\r\n      );\r\n   }\r\n}\r\n\r\n// Handle page transition\r\n/**\r\n * @param {Map<string, any>} pageNameToClass\r\n * @param {string} pageName\r\n * @param {any} pageData\r\n * @param {boolean} historyData\r\n */\r\nasync function processPageEntered(pageNameToClass, pageName, pageData, historyData) {\r\n   // Hide all pages of the application. Later we unhide the one we are entering\r\n   // We also tell all other pages to exit, so they can perform any cleanup\r\n   // We call all pages instead of just the active one, because it is more robust and performance does not suffer much\r\n   // @ts-ignore\r\n   for (let [name, classInstance] of pageNameToClass) {\r\n      // Hide the page\r\n      classInstance.domElem.style.display = \"none\";\r\n\r\n      // Call the page exit() method for all currently loaded pages except the target page,\r\n      // so they can perform any cleanup.\r\n      // Implementation of the exit() function is optional, so we check for its existence\r\n      if (name !== pageName && classInstance.exit) {\r\n         try {\r\n            await classInstance.exit();\r\n         } catch (error) {\r\n            // We just log the error and continue the loop\r\n            myerror(`error calling exit() on ${name}: ${error.name}`);\r\n         }\r\n      }\r\n   }\r\n\r\n   let targetPage = pageNameToClass.get(pageName);\r\n\r\n   // If the target page is not a registered page, go to the Page404 page,\r\n   // passing the target page as pageData\r\n   if (targetPage === undefined) {\r\n      pageData = pageName;\r\n      targetPage = pageNameToClass.get(name404);\r\n   }\r\n\r\n   // Reset scroll position to make sure the page is at the top\r\n   // Special treatment is done if we are using Ionic Framework\r\n   const content = document.querySelector(\"ion-content\");\r\n   if (content) {\r\n      // @ts-ignore\r\n      content.scrollToTop(500);\r\n   } else {\r\n      window.scrollTo(0, 0);\r\n   }\r\n\r\n   // Invoke the page enter() function to enter the page\r\n   // This will allow the page to create dynamic content\r\n   if (targetPage.enter) {\r\n      await targetPage.enter(pageData, historyData);\r\n   } else {\r\n      // Static pages do not have to implement the enter() method.\r\n      // Dynamic pages control their visibility as they need.\r\n      // For static pages we make sure the target page is visible.\r\n      targetPage.style.display = \"block\";\r\n   }\r\n}\r\n\r\n// Listen for PopStateEvent (navigator Back or Forward buttons are clicked)\r\nwindow.addEventListener(\"popstate\", async function (event) {\r\n   // Ignore the event if state does not have data\r\n   var state = event.state;\r\n   if (state == null) {\r\n      return;\r\n   }\r\n\r\n   console.log(event);\r\n\r\n   // Get the page name and data to send\r\n   var pageName = state.pageName;\r\n   var pageData = state.pageData;\r\n\r\n   // Process the page transition\r\n   try {\r\n      await processPageEntered(pageNameToClass, pageName, pageData, true);\r\n   } catch (error) {\r\n      myerror(error);\r\n      // Show an error\r\n      await processPageEntered(\r\n         pageNameToClass,\r\n         \"ErrorPage\",\r\n         { title: error.name, msg: error.message },\r\n         false\r\n      );\r\n   }\r\n});\r\n\r\n// Get the version of the application and store in database\r\n\r\n/**\r\n *\r\n * @returns undefined\r\n */\r\nasync function getAndUpdateVersion() {\r\n   // @ts-ignore\r\n   // let version = import.meta.env.VITE_APP_VERSION\r\n   // TODO: put version info in the config file\r\n   let version = \"1.1.2\";\r\n\r\n   // Store the version in global Window object and in local storage\r\n   // @ts-ignore\r\n   window.appVersion = version;\r\n   window.localStorage.setItem(\"VERSION\", version);\r\n   console.log(\"Version:\", version);\r\n\r\n   return;\r\n}\r\n\r\n// When this event is fired the DOM is fully loaded and safe to manipulate\r\n// @ts-ignore\r\nwindow.addEventListener(\"DOMContentLoaded\", async (event) => {\r\n   console.log(\"window.DOMContentLoaded event fired\");\r\n\r\n   // Get the version of the application asynchronously\r\n   getAndUpdateVersion();\r\n\r\n   // Go to the home page\r\n   await goHome();\r\n\r\n   // // Preload the pages of the application in parallel\r\n   // for (const path in pageModulesMap) {\r\n   //    import(pageModulesMap[path]);\r\n   // }\r\n});\r\n\r\nvar INSTALL_SERVICE_WORKER = true;\r\n\r\n// This function is called on first load and when a refresh is triggered in any page\r\n// When called the DOM is fully loaded and safe to manipulate\r\n// @ts-ignore\r\nwindow.addEventListener(\"load\", async (event) => {\r\n   console.log(\"window.load event fired\");\r\n\r\n   // Install Service Worker only when in Production\r\n   // @ts-ignore\r\n   if (JR_IN_DEVELOPMENT) {\r\n      console.log(\"In development\");\r\n      INSTALL_SERVICE_WORKER = false;\r\n   } else {\r\n      console.log(\"In production\");\r\n   }\r\n\r\n   // Install service worker for off-line support\r\n   if (INSTALL_SERVICE_WORKER && \"serviceWorker\" in navigator) {\r\n      const { Workbox } = await import(\"workbox-window\");\r\n\r\n      const wb = new Workbox(\"./sw.js\");\r\n\r\n      wb.addEventListener(\"message\", (event) => {\r\n         if (event.data.type === \"CACHE_UPDATED\") {\r\n            const { updatedURL } = event.data.payload;\r\n\r\n            console.log(`A newer version of ${updatedURL} is available!`);\r\n         }\r\n      });\r\n\r\n      wb.addEventListener(\"activated\", async (event) => {\r\n         // `event.isUpdate` will be true if another version of the service\r\n         // worker was controlling the page when this version was registered.\r\n         if (event.isUpdate) {\r\n            console.log(\"Service worker has been updated.\", event);\r\n            await performAppUpgrade(true);\r\n         } else {\r\n            console.log(\"Service worker has been installed for the first time.\", event);\r\n            await performAppUpgrade(false);\r\n         }\r\n      });\r\n\r\n      // @ts-ignore\r\n      wb.addEventListener(\"waiting\", (event) => {\r\n         console.log(\r\n            `A new service worker has installed, but it can't activate` +\r\n               `until all tabs running the current version have fully unloaded.`\r\n         );\r\n      });\r\n\r\n      // Register the service worker after event listeners have been added.\r\n      wb.register();\r\n\r\n      //    const swVersion = await wb.messageSW({ type: \"GET_VERSION\" });\r\n      //    console.log(\"Service Worker version:\", swVersion);\r\n   }\r\n});\r\n\r\n// This is called when a new version of the Service Worker has been activated.\r\n// This means that a new version of the application has been installed\r\n/**\r\n * @param {boolean} isUpdate\r\n */\r\nasync function performAppUpgrade(isUpdate) {\r\n   console.log(\"Performing Upgrade\");\r\n\r\n   // Notify the user and ask to refresh the application\r\n   gotoPage(\"SWNotify\", { isUpdate: isUpdate });\r\n}\r\n\r\n// *****************************************************\r\n// HeaderBar definition\r\n// *****************************************************\r\n\r\n// @ts-ignore\r\nfunction toggleMenu() {\r\n   let x = document.getElementById(\"dropMenu\");\r\n   if (x) {\r\n      x.classList.toggle(\"hidden\");\r\n   }\r\n}\r\nfunction hideMenu() {\r\n   let x = document.getElementById(\"dropMenu\");\r\n   if (x) {\r\n      x.classList.add(\"hidden\");\r\n   }\r\n}\r\n/**\r\n * @param {string} e\r\n */\r\nfunction T(e) {\r\n   // @ts-ignore\r\n   if (window.T) {\r\n      // @ts-ignore\r\n      return window.T(e);\r\n   }\r\n   return e;\r\n}\r\n\r\n/**\r\n * @param {boolean} backButton - If true, a back button is shown in the header\r\n * @param {string} loginData? - Login data to show in header\r\n *\r\n * @returns {import(\"uhtml\").Hole} The HTML structure.\r\n */\r\nfunction HeaderBar(backButton = true, loginData) {\r\n   var backButtonHTML;\r\n   if (backButton) {\r\n      backButtonHTML = html` <ion-buttons slot=\"start\">\r\n         <ion-button @click=${() => history.back()}>\r\n            <ion-icon slot=\"start\" name=\"chevron-back\"></ion-icon>\r\n            Back\r\n         </ion-button>\r\n      </ion-buttons>`;\r\n   }\r\n\r\n   var menuButton = html` <ion-buttons slot=\"end\">\r\n      <ion-button aria-label=\"Menu\" @click=${() => gotoPage(\"MenuPage\", \"\")}>\r\n         <ion-icon name=\"menu\"></ion-icon>\r\n      </ion-button>\r\n   </ion-buttons>`;\r\n\r\n   return html`\r\n      <ion-toolbar color=\"primary\">\r\n         ${backButtonHTML}\r\n         <ion-title>${loginData ? loginData : myAppTitle}</ion-title>\r\n         ${menuButton}\r\n      </ion-toolbar>\r\n   `;\r\n}\r\n\r\n/**\r\n * Generates an HTML structure for an error panel using the provided title, message, and optional details.\r\n *\r\n * @param {string} title - The title of the error panel.\r\n * @param {string} message - The main message to display in the error panel.\r\n * @param {string} [details] - Optional additional details to display in the error panel.\r\n *\r\n * @returns {import(\"uhtml\").Hole} The HTML structure for the error panel.\r\n */\r\nfunction ErrorPanel(title, message, details) {\r\n   let theHtml = html`\r\n      <ion-card>\r\n         <ion-card-header>\r\n            <ion-card-title>${title}</ion-card-title>\r\n         </ion-card-header>\r\n\r\n         <ion-card-content class=\"ion-padding-bottom\">\r\n            <div class=\"text-larger\">${message}</div>\r\n         </ion-card-content>\r\n\r\n         ${details\r\n            ? html`\r\n                 <ion-card-content class=\"ion-padding-bottom\">\r\n                    <div class=\"text-medium\">${details}</div>\r\n                 </ion-card-content>\r\n              `\r\n            : null}\r\n\r\n         <div class=\"ion-margin-start ion-margin-bottom\">\r\n            <ion-button color=\"danger\" @click=${() => cleanReload()}>\r\n               <ion-icon slot=\"start\" name=\"home\"></ion-icon>\r\n               ${T(\"Home\")}\r\n            </ion-button>\r\n         </div>\r\n      </ion-card>\r\n   `;\r\n\r\n   return theHtml;\r\n}\r\n\r\n// **************************************************************\r\n// AbstractPage is the superclass of all pages in the application\r\n// **************************************************************\r\n\r\nclass AbstractPage {\r\n   html; // The uhtml html function, for subclasses\r\n   domElem; // The DOM Element that holds the page\r\n   pageName; // The name of the page for routing\r\n   headerBar = HeaderBar;\r\n   loginData = \"\";\r\n\r\n   /**\r\n    * @param {string} id - The name of the page to be registered. This will be used for page routing\r\n    */\r\n   constructor(id) {\r\n      if (!id) {\r\n         throw \"A page name is needed\";\r\n      }\r\n\r\n      // Set the 'html' and 'svg' tag function so subclasses do not have to import 'uhtml'\r\n      this.html = html;\r\n      this.svg = svg;\r\n\r\n      // Create a <div> tag to contain the page\r\n      this.domElem = document.createElement(\"page\");\r\n\r\n      // Set the id and name of the page for routing\r\n      this.pageName = id;\r\n      this.domElem.id = id;\r\n\r\n      // Register the page in the router\r\n      route(this.pageName, this);\r\n\r\n      // The page starts hidden\r\n      this.domElem.style.display = \"none\";\r\n\r\n      // Insert into the DOM inside the <main> element and after pages registered before\r\n      var mainElem = document.querySelector(\"main\");\r\n      if (mainElem) {\r\n         mainElem.appendChild(this.domElem);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @param {import(\"uhtml\").Renderable} theHtml\r\n    * @param {boolean} [backButton=true]\r\n    */\r\n   render(theHtml, backButton = true) {\r\n      // This is called by subclasses to render its contents\r\n\r\n      // Hide the Splash Screen (just in case it was being displayed)\r\n      let elem = document.getElementById(\"SplashScreen\");\r\n      if (elem) {\r\n         elem.style.display = \"none\";\r\n      }\r\n\r\n      // Mark the page as visible\r\n      this.domElem.style.display = \"block\";\r\n\r\n      // Redraw the header just in case the menu was active\r\n      // The caller can specify if the back button has to be displayed in the header\r\n      let header = document.getElementById(\"the_header\");\r\n      if (header) {\r\n         render(header, HeaderBar(backButton, this.loginData));\r\n      }\r\n\r\n      // Render the html of the page into the DOM element of this page\r\n      render(this.domElem, theHtml);\r\n   }\r\n\r\n   /**\r\n    * @param {string} title\r\n    * @param {string} message\r\n    * @param {string} details\r\n    */\r\n   showError(title, message, details) {\r\n      this.render(ErrorPanel(title, message, details));\r\n   }\r\n}\r\n\r\n/**\r\n * @param {string} pageName\r\n * @param {any} classDefinition\r\n */\r\nfunction register(pageName, classDefinition) {\r\n   // Just create an instance. The constructor will take care of everything else\r\n   new classDefinition(pageName);\r\n}\r\n\r\nfunction cleanReload() {\r\n   // Reload the application with a clean URL\r\n   //@ts-ignore\r\n   window.location = window.location.origin + window.location.pathname;\r\n   return;\r\n}\r\n\r\nregister(\r\n   \"Page404\",\r\n   class extends AbstractPage {\r\n      /**\r\n       * @param {string} id\r\n       */\r\n      constructor(id) {\r\n         super(id);\r\n      }\r\n\r\n      /**\r\n       * @param {string} pageData\r\n       */\r\n      enter(pageData) {\r\n         this.showError(\"Page not found\", `The requested page does not exist: ${pageData}`, \"\");\r\n      }\r\n   }\r\n);\r\n\r\nregister(\r\n   \"ErrorPage\",\r\n   class extends AbstractPage {\r\n      /**\r\n       * @param {string} id\r\n       */\r\n      constructor(id) {\r\n         super(id);\r\n      }\r\n\r\n      /**\r\n       * @param {{title:string; msg:string; details:string; back:boolean; level:string}} pageData\r\n       */\r\n      enter(pageData) {\r\n         let html = this.html;\r\n         if (!pageData) {\r\n            pageData = {\r\n               title: \"Error\",\r\n               msg: \"An error has happened\",\r\n               details: \"\",\r\n               back: false,\r\n               level: \"error\",\r\n            };\r\n         }\r\n\r\n         // We expect pageData to be an object with these fields:\r\n         // - title: the string to be used for the title of the error page\r\n         // - msg: the string with the details of the error\r\n         // - details: a string with more details of the error, if needed\r\n         // - back: a boolean indicating if a back button must be displayed\r\n         // - level: a string with the level (\"error\", \"warning\", \"info\")\r\n\r\n         // Provide a default title if the user did not set the title\r\n         let title = T(\"Error\");\r\n         if (pageData.title) {\r\n            title = T(pageData.title);\r\n         }\r\n\r\n         // Provide a default message if the user did not specify it\r\n         let msg = T(\"An error has happened.\");\r\n         if (pageData.msg) {\r\n            msg = T(pageData.msg);\r\n         }\r\n\r\n         //Provide a default color for the button in the page\r\n         let color = \"danger\";\r\n         if (pageData.level == \"info\") {\r\n            color = \"primary\";\r\n         } else if (pageData.level == \"warning\") {\r\n            color = \"warning\";\r\n         }\r\n\r\n         // Display the title and message, with a button that reloads the whole application\r\n         let theHtml = html`\r\n            <ion-card>\r\n               <ion-card-header>\r\n                  <ion-card-title>${title}</ion-card-title>\r\n               </ion-card-header>\r\n\r\n               <ion-card-content class=\"ion-padding-bottom\">\r\n                  <div class=\"text-larger\">${msg}</div>\r\n\r\n                  ${pageData.details\r\n                     ? html` <div class=\"text-medium\">${pageData.details}</div> `\r\n                     : null}\r\n               </ion-card-content>\r\n\r\n               ${pageData.back == true\r\n                  ? null\r\n                  : html`\r\n                       <ion-card-content class=\"ion-padding-bottom\">\r\n                          <div>${T(\"Please click Accept to refresh the page.\")}</div>\r\n                       </ion-card-content>\r\n                    `\r\n                  }\r\n\r\n               <div class=\"ion-margin-start ion-margin-bottom\">\r\n                  ${pageData.back == true\r\n                     ? html` <ion-button .color=${color} @click=${() => history.back()}>\r\n                          <ion-icon slot=\"start\" name=\"chevron-back\"></ion-icon>${T(\"Back\")}\r\n                       </ion-button>`\r\n                     : html` <ion-button .color=${color} @click=${() => cleanReload()}\r\n                          >${T(\"Accept\")}\r\n                       </ion-button>`}\r\n               </div>\r\n            </ion-card>\r\n         `;\r\n         this.render(theHtml, pageData.back);\r\n      }\r\n   }\r\n);\r\n\r\nregister(\"SWNotify\", class extends AbstractPage {\r\n\r\n   constructor(id) {\r\n       super(id)\r\n   }\r\n\r\n   enter(pageData) {\r\n\r\n       let msg\r\n       if (pageData && pageData.isUpdate) {\r\n           msg = T(\"Application updated\")\r\n       } else {\r\n           msg = T(\"Application available\")\r\n       }\r\n\r\n       let theHtml = html`\r\n       <ion-card>\r\n           <ion-card-header>\r\n           <ion-card-title>${msg}</ion-card-title>\r\n           </ion-card-header>\r\n\r\n           <ion-card-content class=\"ion-padding-bottom\">\r\n           <div class=\"text-larger\">\r\n               <p>${T(\"There is a new version of the application and it has already been updated.\")}</p>\r\n               <p>${T(\"Please click Accept to refresh the page.\")}</p>\r\n           </div>\r\n           </ion-card-content>\r\n\r\n           <div class=\"ion-margin-start ion-margin-bottom\">\r\n           <ion-button @click=${() => MHR.cleanReload()}>\r\n               <ion-icon slot=\"start\" name=\"home\"></ion-icon>\r\n               ${T(\"Home\")}\r\n           </ion-button>\r\n           </div>\r\n       </ion-card>\r\n       `\r\n\r\n       this.render(theHtml)\r\n   }\r\n})\r\n\r\n\r\n/**\r\n * @param {string} input\r\n */\r\nfunction btoaUrl(input) {\r\n   // Encode using the standard Javascript function\r\n   let astr = btoa(input);\r\n\r\n   // Replace non-url compatible chars with base64 standard chars\r\n   astr = astr.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n\r\n   return astr;\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n */\r\nfunction atobUrl(input) {\r\n   // Replace non-url compatible chars with base64 standard chars\r\n   input = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n   // Decode using the standard Javascript function\r\n   let bstr = decodeURIComponent(escape(atob(input)));\r\n\r\n   return bstr;\r\n}\r\n\r\n// This module exports the `MHR` object into the global namespace, where we will add\r\n// the relevant functions that we want globally available to other modules.\r\n// This way they do not have to import us (and avoid circular references in some cases) and\r\n// we do not pollute the global namespace with our functions and variables\r\n\r\n// @ts-ignore\r\nglobalThis.MHR = {\r\n   debug: debug,\r\n   mylog: storage.mylog,\r\n   storage: storage,\r\n   route: route,\r\n   goHome: goHome,\r\n   gotoPage: gotoPage,\r\n   processPageEntered: processPageEntered,\r\n   // @ts-ignore\r\n   AbstractPage: AbstractPage,\r\n   register: register,\r\n   ErrorPanel: ErrorPanel,\r\n   cleanReload: cleanReload,\r\n   html: html,\r\n   render: render,\r\n   btoaUrl: btoaUrl,\r\n   atobUrl: atobUrl,\r\n   pageNameToClass: pageNameToClass,\r\n};\r\n\r\n// @ts-ignore\r\nglobalThis.eudi = {\r\n   debug: debug,\r\n   mylog: storage.mylog,\r\n   myerror: storage.myerror,\r\n   storage: storage,\r\n   route: route,\r\n   goHome: goHome,\r\n   gotoPage: gotoPage,\r\n   processPageEntered: processPageEntered,\r\n   // @ts-ignore\r\n   AbstractPage: AbstractPage,\r\n   register: register,\r\n   ErrorPanel: ErrorPanel,\r\n   cleanReload: cleanReload,\r\n   html: html,\r\n   render: render,\r\n   btoaUrl: btoaUrl,\r\n   atobUrl: atobUrl,\r\n   pageNameToClass: pageNameToClass,\r\n};\r\n"],
  "mappings": "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",
  "names": ["pageNameToClass", "event", "html"]
}
