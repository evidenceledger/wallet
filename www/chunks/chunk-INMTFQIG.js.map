{
  "version": 3,
  "sources": ["../../front/src/components/camerainfo.js"],
  "sourcesContent": ["// **************************************\r\n// Functions supporting the camera\r\n// **************************************\r\n\r\n// Get the OS of the device\r\nexport function getPlatformOS() {\r\n    const userAgent = window.navigator.userAgent;\r\n    let os = null;\r\n\r\n    const isIOS = (/iPad|iPhone|iPod/.test(userAgent) ||\r\n        (/Mac|Mac OS|MacIntel/gi.test(userAgent) && (navigator.maxTouchPoints > 1 || \"ontouchend\" in document))) && !window.MSStream;\r\n\r\n    if (/Macintosh|Mac|Mac OS|MacIntel|MacPPC|Mac68K/gi.test(userAgent)) {\r\n        os = 'Mac OS';\r\n    } else if (isIOS) {\r\n        os = 'iOS';\r\n    } else if (/'Win32|Win64|Windows|Windows NT|WinCE/gi.test(userAgent)) {\r\n        os = 'Windows';\r\n    } else if (/Android/gi.test(userAgent)) {\r\n        os = 'Android';\r\n    } else if (/Linux/gi.test(userAgent)) {\r\n        os = 'Linux';\r\n    }\r\n\r\n    return os;\r\n}\r\nconsole.log(\"running on:\", getPlatformOS())\r\n\r\nexport async function getVideoDevices() {\r\n    // Returns an array of video devices or undefined if none\r\n\r\n    // Get the video devices\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n        console.log(\"enumerateDevices() not supported.\");\r\n        return undefined;\r\n    }\r\n\r\n    let allDevices = await navigator.mediaDevices.enumerateDevices()\r\n    let videoDevices = allDevices.filter((device) => {\r\n        return device.kind === \"videoinput\";\r\n    });\r\n    console.log(videoDevices)\r\n    if (videoDevices.length == 0) {\r\n        return undefined;\r\n    }\r\n\r\n    // Check if they have labels. If they don't, it means we have to request permission from the user\r\n    let allLabelsEmpty = videoDevices.every((device) => { return device.label === \"\" })\r\n    if (!allLabelsEmpty) {\r\n        return videoDevices;\r\n    }\r\n\r\n    let stream;\r\n    try {\r\n        // Request a stream to force the system to ask the user\r\n        stream = await navigator.mediaDevices.getUserMedia({\r\n            video: true,\r\n            audio: false,\r\n        });\r\n        // Try again to get the devices with label and id information\r\n        allDevices = await navigator.mediaDevices.enumerateDevices()\r\n        videoDevices = allDevices.filter((device) => {\r\n            return device.kind === \"videoinput\";\r\n        });\r\n    }\r\n    catch {\r\n        // Ignored\r\n        console.log(\"Probably the user did not authorise request\")\r\n    } finally {\r\n        // Release resources if the previous call was successful\r\n        if (stream !== undefined) {\r\n            stream.getVideoTracks().forEach((track) => {\r\n                track.stop();\r\n            });\r\n        }\r\n    }\r\n    return videoDevices\r\n}\r\n\r\nexport async function getPreferredVideoDevice() {\r\n\r\n    // Prepare undefined response\r\n    let undefinedVideoDevice = {\r\n        defaultPreferredCamera: undefined,\r\n        videoDevices: []\r\n    }\r\n\r\n    // Get all video devices, front and back\r\n    let videoDevices = await getVideoDevices()\r\n    if (!videoDevices) {\r\n        return undefinedVideoDevice;\r\n    }\r\n\r\n    let defaultPreferredCamera;\r\n\r\n    // Select specific device only for Android devices\r\n    if (\"Android\" == getPlatformOS()) {\r\n        // The main recommended back camera is the last one in the list\r\n        defaultPreferredCamera = videoDevices[videoDevices.length - 1]\r\n    }\r\n\r\n    return {\r\n        defaultPreferredCamera: defaultPreferredCamera,\r\n        videoDevices: videoDevices\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";AAKO,SAAS,gBAAgB;AAC5B,QAAM,YAAY,OAAO,UAAU;AACnC,MAAI,KAAK;AAET,QAAM,SAAS,mBAAmB,KAAK,SAAS,KAC3C,wBAAwB,KAAK,SAAS,MAAM,UAAU,iBAAiB,KAAK,gBAAgB,cAAe,CAAC,OAAO;AAExH,MAAI,gDAAgD,KAAK,SAAS,GAAG;AACjE,SAAK;AAAA,EACT,WAAW,OAAO;AACd,SAAK;AAAA,EACT,WAAW,0CAA0C,KAAK,SAAS,GAAG;AAClE,SAAK;AAAA,EACT,WAAW,YAAY,KAAK,SAAS,GAAG;AACpC,SAAK;AAAA,EACT,WAAW,UAAU,KAAK,SAAS,GAAG;AAClC,SAAK;AAAA,EACT;AAEA,SAAO;AACX;AACA,QAAQ,IAAI,eAAe,cAAc,CAAC;AAE1C,eAAsB,kBAAkB;AAIpC,MAAI,CAAC,UAAU,gBAAgB,CAAC,UAAU,aAAa,kBAAkB;AACrE,YAAQ,IAAI,mCAAmC;AAC/C,WAAO;AAAA,EACX;AAEA,MAAI,aAAa,MAAM,UAAU,aAAa,iBAAiB;AAC/D,MAAI,eAAe,WAAW,OAAO,CAAC,WAAW;AAC7C,WAAO,OAAO,SAAS;AAAA,EAC3B,CAAC;AACD,UAAQ,IAAI,YAAY;AACxB,MAAI,aAAa,UAAU,GAAG;AAC1B,WAAO;AAAA,EACX;AAGA,MAAI,iBAAiB,aAAa,MAAM,CAAC,WAAW;AAAE,WAAO,OAAO,UAAU;AAAA,EAAG,CAAC;AAClF,MAAI,CAAC,gBAAgB;AACjB,WAAO;AAAA,EACX;AAEA,MAAI;AACJ,MAAI;AAEA,aAAS,MAAM,UAAU,aAAa,aAAa;AAAA,MAC/C,OAAO;AAAA,MACP,OAAO;AAAA,IACX,CAAC;AAED,iBAAa,MAAM,UAAU,aAAa,iBAAiB;AAC3D,mBAAe,WAAW,OAAO,CAAC,WAAW;AACzC,aAAO,OAAO,SAAS;AAAA,IAC3B,CAAC;AAAA,EACL,QACM;AAEF,YAAQ,IAAI,6CAA6C;AAAA,EAC7D,UAAE;AAEE,QAAI,WAAW,QAAW;AACtB,aAAO,eAAe,EAAE,QAAQ,CAAC,UAAU;AACvC,cAAM,KAAK;AAAA,MACf,CAAC;AAAA,IACL;AAAA,EACJ;AACA,SAAO;AACX;AAEA,eAAsB,0BAA0B;AAG5C,MAAI,uBAAuB;AAAA,IACvB,wBAAwB;AAAA,IACxB,cAAc,CAAC;AAAA,EACnB;AAGA,MAAI,eAAe,MAAM,gBAAgB;AACzC,MAAI,CAAC,cAAc;AACf,WAAO;AAAA,EACX;AAEA,MAAI;AAGJ,MAAI,aAAa,cAAc,GAAG;AAE9B,6BAAyB,aAAa,aAAa,SAAS,CAAC;AAAA,EACjE;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AAEJ;",
  "names": []
}
