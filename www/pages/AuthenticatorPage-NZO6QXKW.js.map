{
  "version": 3,
  "sources": ["../../front/src/pages/AuthenticatorPage.js"],
  "sourcesContent": ["let gotoPage = window.MHR.gotoPage\r\nlet goHome = window.MHR.goHome\r\nlet myerror = window.MHR.storage.myerror\r\nlet mylog = window.MHR.storage.mylog\r\n\r\nwindow.MHR.register(\"AuthenticatorPage\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    enter(pageData) {\r\n        let html = this.html\r\n\r\n        // We expect pageData to be an object with these fields:\r\n        // \"authenticatorRequired\": \"yes\",\r\n        // \"authType\":              \"registration\",\r\n        // \"email\":                 email,\r\n        // \"origin\":                origin,\r\n        // \"state\":                 state\r\n\r\n        // Provide a default title if the user did not set the title\r\n        let title = T(\"Authenticator required\")\r\n\r\n        const authType = pageData.authType\r\n        const email = pageData.email\r\n        const origin = pageData.origin\r\n        const state = pageData.state\r\n\r\n        // Display the title and message, with a button that goes to the home page\r\n        let theHtml = html`\r\n        <ion-card>\r\n    \r\n            <ion-card-header>\r\n                <ion-card-title>${title}</ion-card-title>\r\n            </ion-card-header>\r\n    \r\n            <ion-card-content>\r\n            <div style=\"font-size:16px\">The server requires additional security with an authenticator.</div>\r\n            <div style=\"font-size:16px\">Click below to use it.</div>\r\n            </ion-card-content>\r\n            \r\n            <div class=\"ion-margin-start ion-margin-bottom\">\r\n                <ion-button expand=\"block\" @click=${()=> webAuthn(authType, origin, email, state)}>\r\n                    <ion-icon size=\"large\" slot=\"start\" name=\"finger-print\"></ion-icon>\r\n                    ${T(\"Click to use biometric authentication\")}\r\n                </ion-button>\r\n            </div>\r\n\r\n        </ion-card>            \r\n        `\r\n        this.render(theHtml)\r\n    }\r\n})\r\n\r\n\r\nvar apiPrefix = \"/webauthn\"\r\n\r\nasync function webAuthn(authType, origin, username, state) {\r\n    var error \r\n    // Check if we have any WebAuthn credential in this device for that user\r\n    const wkey = \"wauth-\" + username\r\n    const wauthid = await window.MHR.storage.settingsGet(wkey)\r\n\r\n    if (wauthid == null) {\r\n        // Register new user in any case, if we do not have credentials in this device\r\n        console.log(\"no webauthn credentials in local device, registering\", username)\r\n        error = await registerUser(origin, username, state)\r\n        if (error) {\r\n            myerror(error)\r\n            gotoPage(\"ErrorPage\", {\r\n                title: \"Error\",\r\n                msg: \"Error registering the user\"\r\n            });\r\n            return\r\n        }\r\n    } else if (authType == \"registration\") {\r\n        // Server does not have credentials for this user, requires registration\r\n        console.log(\"no credentials in server, registering\", username)\r\n        error = await registerUser(origin, username, state)\r\n        if (error) {\r\n            myerror(error)\r\n            gotoPage(\"ErrorPage\", {\r\n                title: \"Error\",\r\n                msg: \"Error registering the user\"\r\n            });\r\n            return\r\n        }\r\n    } else {\r\n        // Server already has credentials for this user, requires login\r\n        console.log(\"already credentials in server, loging\", username)\r\n        error = await loginUser(origin, username, state)\r\n        if (error) {\r\n            myerror(error)\r\n            gotoPage(\"ErrorPage\", {\r\n                title: \"Error\",\r\n                msg: \"Error loging user\"\r\n            });\r\n            return\r\n        }\r\n    }\r\n\r\n    // TODO: display a success page\r\n    gotoPage(\"AuthenticatorSuccessPage\")\r\n    return\r\n}\r\n\r\n// registerUser asks the authenticator device where the wallet is running for a new WebAuthn credential\r\n// and sends the new credential to the server, which will store it associated to the user+device \r\nasync function registerUser(origin, username, state) {\r\n\r\n    \r\n\r\n    try {\r\n\r\n        // Get from the server the CredentialCreationOptions\r\n        // It will be associated to the username that corresponds to the current state, which is the\r\n        // username inside the credential that was sent to the Verifier\r\n        var response = await fetch(origin + apiPrefix + '/register/begin/' + username + \"?state=\" + state,\r\n            {\r\n                mode: \"cors\"\r\n            })\r\n        if (!response.ok) {\r\n            var errorText = await response.text()\r\n            mylog(errorText)\r\n            return \"error\"\r\n        }\r\n        var responseJSON = await response.json()\r\n        var credentialCreationOptions = responseJSON.options\r\n\r\n        // This request is associated to a session in the server. We will send the response associated to that session\r\n        // so the server can match the reply with the request\r\n        var session = responseJSON.session\r\n        \r\n        mylog(\"Received CredentialCreationOptions\", credentialCreationOptions)\r\n        mylog(\"Session:\", session)\r\n\r\n\r\n        // Decode the fields that are b64Url encoded for transmission\r\n        credentialCreationOptions.publicKey.challenge = bufferDecode(credentialCreationOptions.publicKey.challenge);\r\n        credentialCreationOptions.publicKey.user.id = bufferDecode(credentialCreationOptions.publicKey.user.id);\r\n\r\n        // Decode each of the excluded credentials\r\n        // This is a list of existing credentials in the server, to avoid the authenticator creating a new one\r\n        // if the server already has a credential for this authenticator\r\n\r\n        const wauthid = await window.MHR.storage.settingsGet(\"wauth-\" + username)\r\n        if (wauthid == null) {\r\n            console.log(\"no credentials in local device, erasing excludeCredentials data\")\r\n            credentialCreationOptions.publicKey.excludeCredentials = []\r\n        }\r\n\r\n        if (credentialCreationOptions.publicKey.excludeCredentials) {\r\n            for (var i = 0; i < credentialCreationOptions.publicKey.excludeCredentials.length; i++) {\r\n                credentialCreationOptions.publicKey.excludeCredentials[i].id = bufferDecode(credentialCreationOptions.publicKey.excludeCredentials[i].id);\r\n            }\r\n        }\r\n\r\n        // Make the Authenticator create the credential\r\n        mylog(\"creating new Authenticator credential\")\r\n        try {\r\n            var credential = await navigator.credentials.create({\r\n                publicKey: credentialCreationOptions.publicKey\r\n            })\r\n        } catch (error) {\r\n            myerror(error)\r\n            return error\r\n        }\r\n\r\n        mylog(\"Authenticator created Credential\", credential)\r\n\r\n        // Get the fields that we should encode for transmission to the server\r\n        let attestationObject = credential.response.attestationObject;\r\n        let clientDataJSON = credential.response.clientDataJSON;\r\n        let rawId = credential.rawId;\r\n\r\n        // Create the object to send\r\n        var data = {\r\n            id: credential.id,\r\n            rawId: bufferEncode(rawId),\r\n            type: credential.type,\r\n            response: {\r\n                attestationObject: bufferEncode(attestationObject),\r\n                clientDataJSON: bufferEncode(clientDataJSON),\r\n            },\r\n        }\r\n\r\n        var wholeData = {\r\n            response: data,\r\n            session: session\r\n        }\r\n\r\n        // Perform a POST to the server\r\n        mylog(\"sending Authenticator credential to server\")\r\n        var response = await fetch(origin + apiPrefix + '/register/finish/' + username + \"?state=\" + state, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'session_id': session\r\n            },\r\n            mode: 'cors',\r\n            body: JSON.stringify(wholeData) // body data type must match \"Content-Type\" header\r\n        });\r\n        if (!response.ok) {\r\n            mylog(errorText)\r\n            var errorText = await response.text()\r\n            return \"error\"\r\n        }\r\n\r\n        mylog(\"Authenticator credential sent successfully to server\")\r\n\r\n        // Record locally that an attestation was created\r\n        const wkey = \"wauth-\" + username\r\n        await window.MHR.storage.settingsPut(wkey, data.id)\r\n\r\n        return\r\n\r\n\r\n    } catch (error) {\r\n        myerror(error)\r\n        return error\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function loginUser(origin, username, state) {\r\n\r\n    try {\r\n\r\n        // Get from the server the CredentialRequestOptions\r\n        var response = await fetch(origin + apiPrefix + '/login/begin/' + username + \"?state=\" + state,\r\n            {\r\n                mode: \"cors\"\r\n            })\r\n        if (!response.ok) {\r\n            myerror(\"error requesting CredentialRequestOptions\", response.status)\r\n            return \"error\"\r\n        }\r\n\r\n        var responseJSON = await response.json()\r\n        var credentialRequestOptions = responseJSON.options\r\n        var session = responseJSON.session\r\n\r\n        mylog(\"Received CredentialRequestOptions\", credentialRequestOptions)\r\n\r\n        // Decode the challenge from the server\r\n        credentialRequestOptions.publicKey.challenge = bufferDecode(credentialRequestOptions.publicKey.challenge)\r\n\r\n        // Decode each of the allowed credentials\r\n        credentialRequestOptions.publicKey.allowCredentials.forEach(function (listItem) {\r\n            listItem.id = bufferDecode(listItem.id)\r\n        });\r\n\r\n        const discoverable = true\r\n        var assertion\r\n\r\n        if (discoverable) {\r\n            credentialRequestOptions.publicKey.allowCredentials = []\r\n            // Call the authenticator to create the assertion\r\n            try {\r\n                assertion = await navigator.credentials.get({\r\n                    publicKey: credentialRequestOptions.publicKey\r\n                })\r\n                if (assertion == null) {\r\n                    myerror(\"null assertion received from authenticator device\")\r\n                    return \"error\"\r\n                }\r\n            } catch (error) {\r\n                // Log and present the error page\r\n                myerror(error)\r\n                return error\r\n            }\r\n\r\n            mylog(\"Discoverable Assertion created\", assertion)\r\n\r\n        } else {\r\n            // Call the authenticator to create the assertion\r\n            try {\r\n                assertion = await navigator.credentials.get({\r\n                    publicKey: credentialRequestOptions.publicKey\r\n                })\r\n                if (assertion == null) {\r\n                    myerror(\"null assertion received from authenticator device\")\r\n                    return \"error\"\r\n                }\r\n            } catch (error) {\r\n                // Log and present the error page\r\n                myerror(error)\r\n                return error\r\n            }\r\n\r\n        }\r\n\r\n        mylog(\"Authenticator created Assertion\", assertion)\r\n\r\n        // Get the fields that we should encode for transmission to the server\r\n        let authData = assertion.response.authenticatorData\r\n        let clientDataJSON = assertion.response.clientDataJSON\r\n        let rawId = assertion.rawId\r\n        let sig = assertion.response.signature\r\n        let userHandle = assertion.response.userHandle\r\n\r\n        // Create the object to send\r\n        var data = {\r\n            id: assertion.id,\r\n            rawId: bufferEncode(rawId),\r\n            type: assertion.type,\r\n            response: {\r\n                authenticatorData: bufferEncode(authData),\r\n                clientDataJSON: bufferEncode(clientDataJSON),\r\n                signature: bufferEncode(sig),\r\n                userHandle: bufferEncode(userHandle),\r\n            },\r\n        }\r\n\r\n        // The wrapper object for the POST body\r\n        var wholeData = {\r\n            response: data,\r\n            session: session\r\n        }\r\n\r\n        // Perform a POST to the server\r\n        try {\r\n            \r\n            var response = await fetch(origin + apiPrefix + '/login/finish/' + username + \"?state=\" + state, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'session_id': session\r\n                },\r\n                mode: 'cors',\r\n                body: JSON.stringify(wholeData)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                var errorText = await response.text()\r\n                mylog(errorText)\r\n                return \"error\"\r\n            }\r\n\r\n            return\r\n    \r\n\r\n        } catch (error) {\r\n            myerror(error)\r\n            return error        \r\n        }\r\n\r\n    } catch (error) {\r\n        myerror(error)\r\n        return error\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nwindow.MHR.register(\"AuthenticatorSuccessPage\", class extends window.MHR.AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    enter(pageData) {\r\n        let html = this.html\r\n\r\n        // Display the title and message, with a button that goes to the home page\r\n        let theHtml = html`\r\n\r\n        <ion-card>\r\n\r\n            <ion-card-header>\r\n                <ion-card-title>Authentication success</ion-card-title>\r\n            </ion-card-header>\r\n\r\n            <ion-card-content class=\"ion-padding-bottom\">\r\n\r\n                <div class=\"text-larger\">The authentication process has been completed</div>\r\n\r\n            </ion-card-content>\r\n\r\n            <div class=\"ion-margin-start ion-margin-bottom\">\r\n\r\n                <ion-button @click=${()=> window.MHR.cleanReload()}>\r\n                    <ion-icon slot=\"start\" name=\"home\"></ion-icon>\r\n                    ${T(\"Home\")}\r\n                </ion-button>\r\n\r\n            </div>\r\n        </ion-card>\r\n        `\r\n\r\n        this.render(theHtml)\r\n    }\r\n\r\n})\r\n\r\n\r\n// Base64 to ArrayBuffer\r\nfunction bufferDecode(value) {\r\n    return Uint8Array.from(atob(value), c => c.charCodeAt(0));\r\n}\r\n\r\n// ArrayBuffer to URLBase64\r\nfunction bufferEncode(value) {\r\n    return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))\r\n        .replace(/\\+/g, \"-\")\r\n        .replace(/\\//g, \"_\")\r\n        .replace(/=/g, \"\");;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
