{
  "version": 3,
  "sources": ["../../front/node_modules/js-base64/base64.mjs", "../../front/src/pages/AuthenticationRequestPage.js"],
  "sourcesContent": ["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "import { Base64 } from \"js-base64\";\n\nimport { decodeUnsafeJWT } from \"../components/jwt\";\nimport { renderAnyCredentialCard } from \"../components/renderAnyCredential\";\nimport { importFromJWK, verify, verifyJWT, signJWT } from \"../components/crypto\";\n\n// @ts-ignore\nconst MHR = globalThis.MHR;\n\n// Copy some globals to make code less verbose\nlet gotoPage = MHR.gotoPage;\nlet goHome = MHR.goHome;\nlet storage = MHR.storage;\nlet myerror = globalThis.MHR.storage.myerror;\nlet mylog = globalThis.MHR.storage.mylog;\nlet html = MHR.html;\n\nvar debug = localStorage.getItem(\"MHRdebug\") == \"true\";\n\n// Make all requests via the server instead of from the JavaScript client\nconst viaServer = \"https://wallet.mycredential.eu/serverhandler\";\n\n// We will perform SIOP/OpenID4VP Authentication flow\nMHR.register(\n   \"AuthenticationRequestPage\",\n   class extends MHR.AbstractPage {\n      WebAuthnSupported = false;\n      PlatformAuthenticatorSupported = false;\n\n      constructor(id) {\n         super(id);\n      }\n\n      /**\n       * @param {string} openIdUrl The url for an OID4VP Authentication Request\n       */\n      async enter(openIdUrl) {\n         let html = this.html;\n\n         if (debug) {\n            alert(`SelectCredential: ${openIdUrl}`);\n         }\n\n         mylog(\"Inside AuthenticationRequestPage:\", openIdUrl);\n         if (openIdUrl == null) {\n            myerror(\"No URL has been specified\");\n            this.showError(\"Error\", \"No URL has been specified\");\n            return;\n         }\n\n         // Check whether current browser supports WebAuthn\n         if (globalThis.PublicKeyCredential) {\n            console.log(\"WebAuthn is supported\");\n            this.WebAuthnSupported = true;\n\n            // Check for PlatformAuthenticator\n            let available =\n               await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n            if (available) {\n               this.PlatformAuthenticatorSupported = true;\n            }\n         } else {\n            console.log(\"WebAuthn NOT supported\");\n         }\n\n         // Derive from the received URL a simple one ready for parsing.\n         // We do not use the host name for anything, except to make happy the url parser.\n         // The \"interesting\" part is in the query parameters.\n         openIdUrl = openIdUrl.replace(\"openid4vp://?\", \"https://wallet.example.com/?\");\n\n         // Convert the input string to a URL object\n         const inputURL = new URL(openIdUrl);\n         if (debug) {\n            alert(inputURL);\n         }\n\n         // The URL can have two formats:\n         // 1. An OpenId url with an Authentication Request object specified in the query parameters\n         // 2. A url specifying a reference to an Authentication Request object, using 'request_uri'\n         //\n         // We detect which one is it by looking at the query parameters:\n         // 1. If 'request_uri' is in the url, then the AR is by reference, and the object can be retrieved\n         //    by fetching the object.\n         // 2. Otherwise, the AR object is in the url. We do not yet support this.\n\n         // Get the relevant parameters from the query string\n         const params = new URLSearchParams(inputURL.search);\n\n         // The request_uri will be used to retrieve the AR from the Verifier\n         var request_uri = params.get(\"request_uri\");\n         if (!request_uri) {\n            gotoPage(\"ErrorPage\", {\n               title: \"Error\",\n               msg: \"'request_uri' parameter not found in URL\",\n            });\n            return;\n         }\n\n         // It is URLEncoded\n         request_uri = decodeURIComponent(request_uri);\n\n         if (debug) {\n            alert(request_uri);\n         }\n\n         // Retrieve the AR from the Verifier\n         const authRequestJWT = await getAuthRequest(request_uri);\n         if (!authRequestJWT) {\n            mylog(\"authRequest is null, aborting\");\n            return;\n         }\n         if (authRequestJWT == \"error\") {\n            alert(\"checking error after getAuthRequestDelegated\");\n            this.showError(\"Error\", \"Error fetching Authorization Request\");\n            return;\n         }\n         console.log(authRequestJWT);\n\n         if (debug) {\n            this.displayAR(authRequestJWT);\n         } else {\n            await this.displayCredentials(authRequestJWT);\n         }\n         return;\n      }\n\n      /**\n       * Displays the Authentication Request (AR) details on the UI, for debugging purposes\n       *\n       * @param {string} authRequestJWT - The JWT containing the Authentication Request.\n       * @returns {<void>}\n       */\n      displayAR(authRequestJWT) {\n         let html = this.html;\n\n         // The AR is in the payload of the received JWT\n         const authRequest = decodeUnsafeJWT(authRequestJWT);\n         mylog(\"Decoded authRequest\", authRequest);\n         var ar = authRequest.body;\n\n         let theHtml = html`\n            <div class=\"margin-small text-small\">\n               <p><b>client_id: </b>${ar.client_id}</p>\n               <p><b>client_id_scheme: </b>${ar.client_id_schemne}</p>\n               <p><b>response_uri: </b>${ar.response_uri}</p>\n               <p><b>response_type: </b>${ar.response_type}</p>\n               <p><b>response_mode: </b>${ar.response_mode}</p>\n               <p><b>nonce: </b>${ar.nonce}</p>\n               <p><b>state: </b>${ar.state}</p>\n               <p><b>scope: </b>${ar.scope}</p>\n\n               <div class=\"ion-margin-start ion-margin-bottom\">\n                  <ion-button @click=${() => this.displayCredentials(authRequestJWT)}\n                     >Continue\n                  </ion-button>\n               </div>\n            </div>\n         `;\n         this.render(theHtml);\n      }\n\n      /**\n       * Displays the credentials that the user has in the Wallet and that match the requested type in the AR.\n       * The user must select the one he wants to send to the Verifier, or cancel the operation\n       *\n       * @param {string} authRequestJWT - The JWT containing the Authentication Request.\n       * @returns {Promise<void>} A promise that resolves when the list of credentials are rendered.\n       */\n      async displayCredentials(authRequestJWT) {\n         // TODO: verify the signature and that the signer is the expected one and that it is in the\n         // corresponding trusted list.\n\n         // The AR is in the payload of the received JWT\n         const authRequest = decodeUnsafeJWT(authRequestJWT);\n         mylog(\"Decoded authRequest\", authRequest);\n         var ar = authRequest.body;\n\n         // response_uri is the endpoint where we have to send the Authentication Response\n         // We are going to extract the RP identity from that URL\n         var rpURL = new URL(ar.response_uri);\n         mylog(\"rpURL\", rpURL);\n         var rpDomain = rpURL.hostname;\n\n         // Retrieve all credentials from storage, to process them in memory\n         var credStructs = await storage.credentialsGetAllRecent();\n         if (!credStructs) {\n            let theHtml = html`\n               <div class=\"w3-panel w3-margin w3-card w3-center w3-round color-error\">\n                  <p>You do not have a Verifiable Credential.</p>\n                  <p>Please go to an Issuer to obtain one.</p>\n               </div>\n            `;\n            this.render(theHtml);\n            return;\n         }\n\n         // We use scope to ask for a specific type of credential, using a hierarchical dotted path\n         // Get the last segment of the credential type in 'scope'\n         const scopeParts = ar.scope.split(\".\");\n         if (scopeParts.length == 0) {\n            myerror(\"Invalid scope specified\");\n            this.showError(\"Error\", \"Invalid scope specified\");\n            return;\n         }\n         const displayCredType = scopeParts[scopeParts.length - 1];\n\n         // Select all credentials of the requested type\n         var credentials = [];\n         for (const cc of credStructs) {\n            // The credential is of type 'vc_jwt_json'. The 'vc' claim was stored in the 'decoded' field in storage.\n            const vc = cc.decoded;\n            mylog(vc);\n\n            // The type array of the VC\n            const vctype = vc.type;\n            mylog(\"vctype:\", vctype);\n\n            // The credential type requested by the Verifier must be in the type array of the VC\n            if (vctype.includes(displayCredType)) {\n               mylog(\"adding credential\");\n               credentials.push(cc);\n            }\n         }\n\n         // Error message if no credentials satisfy the condition\n         if (credentials.length == 0) {\n            var msg = html`\n               <p>\n                  <b>${rpDomain}</b> has requested a Verifiable Credential of type\n                  ${displayCredType}, but you do not have any credential of that type.\n               </p>\n               <p>Please go to an Issuer to obtain one.</p>\n            `;\n            this.showError(\"Error\", msg);\n            return;\n         }\n\n         let theHtml = html`\n            <ion-card color=\"warning\">\n               <ion-card-header>\n                  <ion-card-title>Authentication Request</ion-card-title>\n               </ion-card-header>\n               <ion-card-content>\n                  <b>${rpDomain}</b> has requested a Verifiable Credential of type\n                  ${displayCredType}. Use one of the credentials below to authenticate.\n               </ion-card-content>\n            </ion-card>\n\n            ${credentials.map(\n               (cred) =>\n                  html`${vcToHtml(\n                     cred,\n                     ar.nonce,\n                     ar.response_uri,\n                     ar.state,\n                     this.WebAuthnSupported\n                  )}`\n            )}\n         `;\n         this.render(theHtml);\n      }\n   }\n);\n\n// Render the credential with buttons so the user can select it for authentication\nfunction vcToHtml(cc, nonce, response_uri, state, webAuthnSupported) {\n   // TODO: retrieve the holder and its private key from DB\n\n   // Get the holder that will present the credential\n   // We get this from the credential subject\n   mylog(\"in VCToHTML\");\n   const vc = cc.decoded;\n   mylog(vc);\n   const holder = vc.credentialSubject?.mandate?.mandatee?.id;\n   mylog(\"holder:\", holder);\n\n   // A Verifiable Presentation can send more than one credential. We only send one.\n   var credentials = [cc.encoded];\n\n   // Each credential has a button to allow the user to send it to the Verifier\n   const div = html`\n      <ion-card>\n         ${renderAnyCredentialCard(vc)}\n\n         <div class=\"ion-margin-start ion-margin-bottom\">\n            <ion-button @click=${() => MHR.cleanReload()}>\n               <ion-icon slot=\"start\" name=\"chevron-back\"></ion-icon>\n               ${T(\"Cancel\")}\n            </ion-button>\n\n            <ion-button\n               @click=${(e) =>\n                  sendAuthenticationResponse(\n                     e,\n                     holder,\n                     response_uri,\n                     credentials,\n                     state,\n                     nonce,\n                     webAuthnSupported\n                  )}\n            >\n               <ion-icon slot=\"start\" name=\"paper-plane\"></ion-icon>\n               ${T(\"Send Credential\")}\n            </ion-button>\n         </div>\n      </ion-card>\n   `;\n\n   return div;\n}\n\n// sendAuthenticationResponse prepares an Authentication Response and sends it to the server as specified in the endpoint\nasync function sendAuthenticationResponse(\n   e,\n   holder,\n   response_uri,\n   credentials,\n   state,\n   nonce,\n   webAuthnSupported\n) {\n   e.preventDefault();\n   debugger\n\n   var domedid = localStorage.getItem(\"domedid\");\n   domedid = JSON.parse(domedid);\n\n   const endpointURL = new URL(response_uri);\n   const origin = endpointURL.origin;\n\n   mylog(\"sending AuthenticationResponse to:\", response_uri);\n\n   const uuid = globalThis.crypto.randomUUID();\n   const now = Math.floor(Date.now() / 1000);\n\n   const didIdentifier = holder.substring(\"did:key:\".length);\n\n   var jwtHeaders = {\n      kid: holder + \"#\" + didIdentifier,\n      typ: \"JWT\",\n      alg: \"ES256\",\n   };\n\n   // Create the vp_token structure\n   var vpClaim = {\n      context: [\"https://www.w3.org/ns/credentials/v2\"],\n      type: [\"VerifiablePresentation\"],\n      id: uuid,\n      verifiableCredential: credentials,\n      holder: holder,\n   };\n\n   var vp_token_payload = {\n      jti: uuid,\n      sub: holder,\n      aud: \"https://self-issued.me/v2\",\n      iat: now,\n      nbf: now,\n      exp: now + 480,\n      iss: holder,\n      nonce: nonce,\n      vp: vpClaim,\n   };\n\n   const jwt = await signJWT(jwtHeaders, vp_token_payload, domedid.privateKey);\n   const vp_token = Base64.encodeURI(jwt);\n   mylog(\"The encoded vpToken \", vp_token);\n\n   // var formBody =\n   //    \"vp_token=\" +\n   //    vp_token +\n   //    \"&state=\" +\n   //    state +\n   //    \"&presentation_submission=\" +\n   //    Base64.encodeURI(JSON.stringify(presentationSubmissionJSON()));\n   var formBody = \"vp_token=\" + vp_token + \"&state=\" + state;\n   mylog(formBody);\n\n   debugger;\n   const response = await doPOST(response_uri, formBody, \"application/x-www-form-urlencoded\");\n   await gotoPage(\"AuthenticationResponseSuccess\");\n   return;\n}\n\nwindow.MHR.register(\n   \"AuthenticationResponseSuccess\",\n   class extends window.MHR.AbstractPage {\n      constructor(id) {\n         super(id);\n      }\n\n      enter(pageData) {\n         let html = this.html;\n\n         // Display the title and message, with a button that goes to the home page\n         let theHtml = html`\n            <ion-card>\n               <ion-card-header>\n                  <ion-card-title>Authentication success</ion-card-title>\n               </ion-card-header>\n\n               <ion-card-content class=\"ion-padding-bottom\">\n                  <div class=\"text-larger\">The authentication process has been completed</div>\n               </ion-card-content>\n\n               <div class=\"ion-margin-start ion-margin-bottom\">\n                  <ion-button @click=${() => window.MHR.cleanReload()}>\n                     <ion-icon slot=\"start\" name=\"home\"></ion-icon>\n                     ${T(\"Home\")}\n                  </ion-button>\n               </div>\n            </ion-card>\n         `;\n\n         this.render(theHtml);\n      }\n   }\n);\n\nvar apiPrefix = \"/webauthn\";\n\n// registerUser asks the authenticator device where the wallet is running for a new WebAuthn credential\n// and sends the new credential to the server, which will store it associated to the user+device\nasync function registerUser(origin, username, state) {\n   try {\n      // Get from the server the CredentialCreationOptions\n      // It will be associated to the username that corresponds to the current state, which is the\n      // username inside the credential that was sent to the Verifier\n      var response = await fetch(\n         origin + apiPrefix + \"/register/begin/\" + username + \"?state=\" + state,\n         {\n            mode: \"cors\",\n         }\n      );\n      if (!response.ok) {\n         var errorText = await response.text();\n         mylog(errorText);\n         return \"error\";\n      }\n      var responseJSON = await response.json();\n      var credentialCreationOptions = responseJSON.options;\n\n      // This request is associated to a session in the server. We will send the response associated to that session\n      // so the server can match the reply with the request\n      var session = responseJSON.session;\n\n      mylog(\"Received CredentialCreationOptions\", credentialCreationOptions);\n      mylog(\"Session:\", session);\n\n      // Decode the fields that are b64Url encoded for transmission\n      credentialCreationOptions.publicKey.challenge = bufferDecode(\n         credentialCreationOptions.publicKey.challenge\n      );\n      credentialCreationOptions.publicKey.user.id = bufferDecode(\n         credentialCreationOptions.publicKey.user.id\n      );\n\n      // Decode each of the excluded credentials\n      // This is a list of existing credentials in the server, to avoid the authenticator creating a new one\n      // if the server already has a credential for this authenticator\n      if (credentialCreationOptions.publicKey.excludeCredentials) {\n         for (var i = 0; i < credentialCreationOptions.publicKey.excludeCredentials.length; i++) {\n            credentialCreationOptions.publicKey.excludeCredentials[i].id = bufferDecode(\n               credentialCreationOptions.publicKey.excludeCredentials[i].id\n            );\n         }\n      }\n\n      // Make the Authenticator create the credential\n      mylog(\"creating new Authenticator credential\");\n      try {\n         var credential = await navigator.credentials.create({\n            publicKey: credentialCreationOptions.publicKey,\n         });\n      } catch (error) {\n         myerror(error);\n         return error;\n      }\n\n      mylog(\"Authenticator created Credential\", credential);\n\n      // Get the fields that we should encode for transmission to the server\n      let attestationObject = credential.response.attestationObject;\n      let clientDataJSON = credential.response.clientDataJSON;\n      let rawId = credential.rawId;\n\n      // Create the object to send\n      var data = {\n         id: credential.id,\n         rawId: bufferEncode(rawId),\n         type: credential.type,\n         response: {\n            attestationObject: bufferEncode(attestationObject),\n            clientDataJSON: bufferEncode(clientDataJSON),\n         },\n      };\n\n      var wholeData = {\n         response: data,\n         session: session,\n      };\n\n      // Perform a POST to the server\n      mylog(\"sending Authenticator credential to server\");\n      var response = await fetch(\n         origin + apiPrefix + \"/register/finish/\" + username + \"?state=\" + state,\n         {\n            method: \"POST\",\n            headers: {\n               \"Content-Type\": \"application/json\",\n               session_id: session,\n            },\n            mode: \"cors\",\n            body: JSON.stringify(wholeData), // body data type must match \"Content-Type\" header\n         }\n      );\n      if (!response.ok) {\n         var errorText = await response.text();\n         mylog(errorText);\n         return \"error\";\n      }\n\n      mylog(\"Authenticator credential sent successfully to server\");\n      return;\n   } catch (error) {\n      myerror(error);\n      return error;\n   }\n}\n\nasync function loginUser(origin, username, state) {\n   try {\n      // Get from the server the CredentialRequestOptions\n      var response = await fetch(\n         origin + apiPrefix + \"/login/begin/\" + username + \"?state=\" + state,\n         {\n            mode: \"cors\",\n         }\n      );\n      if (!response.ok) {\n         myerror(\"error requesting CredentialRequestOptions\", response.status);\n         return \"error\";\n      }\n\n      var responseJSON = await response.json();\n      var credentialRequestOptions = responseJSON.options;\n      var session = responseJSON.session;\n\n      mylog(\"Received CredentialRequestOptions\", credentialRequestOptions);\n\n      // Decode the challenge from the server\n      credentialRequestOptions.publicKey.challenge = bufferDecode(\n         credentialRequestOptions.publicKey.challenge\n      );\n\n      // Decode each of the allowed credentials\n      credentialRequestOptions.publicKey.allowCredentials.forEach(function (listItem) {\n         listItem.id = bufferDecode(listItem.id);\n      });\n\n      // Call the authenticator to create the assertion\n      try {\n         var assertion = await navigator.credentials.get({\n            publicKey: credentialRequestOptions.publicKey,\n         });\n         if (assertion == null) {\n            myerror(\"null assertion received from authenticator device\");\n            return \"error\";\n         }\n      } catch (error) {\n         // Log and present the error page\n         myerror(error);\n         return error;\n      }\n\n      mylog(\"Authenticator created Assertion\", assertion);\n\n      // Get the fields that we should encode for transmission to the server\n      let authData = assertion.response.authenticatorData;\n      let clientDataJSON = assertion.response.clientDataJSON;\n      let rawId = assertion.rawId;\n      let sig = assertion.response.signature;\n      let userHandle = assertion.response.userHandle;\n\n      // Create the object to send\n      var data = {\n         id: assertion.id,\n         rawId: bufferEncode(rawId),\n         type: assertion.type,\n         response: {\n            authenticatorData: bufferEncode(authData),\n            clientDataJSON: bufferEncode(clientDataJSON),\n            signature: bufferEncode(sig),\n            userHandle: bufferEncode(userHandle),\n         },\n      };\n\n      // The wrapper object for the POST body\n      var wholeData = {\n         response: data,\n         session: session,\n      };\n\n      // Perform a POST to the server\n      try {\n         var response = await fetch(\n            origin + apiPrefix + \"/login/finish/\" + username + \"?state=\" + state,\n            {\n               method: \"POST\",\n               headers: {\n                  \"Content-Type\": \"application/json\",\n                  session_id: session,\n               },\n               mode: \"cors\",\n               body: JSON.stringify(wholeData),\n            }\n         );\n\n         if (!response.ok) {\n            var errorText = await response.text();\n            mylog(errorText);\n            return \"error\";\n         }\n\n         return;\n      } catch (error) {\n         myerror(error);\n         return error;\n      }\n   } catch (error) {\n      myerror(error);\n      return error;\n   }\n}\n\n// This is the predefined PresentationSubmission in DOME\nfunction presentationSubmissionJSON() {\n   return {\n      definition_id: \"SingleCredentialPresentation\",\n      id: \"SingleCredentialSubmission\",\n      descriptor_map: [\n         {\n            id: \"single_credential\",\n            path: \"$\",\n            format: \"jwt_vp_json\",\n            path_nested: {\n               format: \"jwt_vc_json\",\n               path: \"$.verifiableCredential[0]\",\n            },\n         },\n      ],\n   };\n}\n\n// Base64 to ArrayBuffer\nfunction bufferDecode(value) {\n   return Uint8Array.from(atob(value), (c) => c.charCodeAt(0));\n}\n\n// ArrayBuffer to URLBase64\nfunction bufferEncode(value) {\n   return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=/g, \"\");\n}\n\n/**\n * Retrieves the Authorization Request from the Verifier at the uri specified\n * https://www.rfc-editor.org/rfc/rfc9101.html#section-5.2.3\n *\n * @param {string} uri - The uri of the server\n * @returns {Promise<string>} The Authorization Request as a JWT\n */\nasync function getAuthRequest(uri) {\n   mylog(\"Fetching AuthReq from\", uri);\n\n   var response = await fetch(uri);\n\n   if (!response.ok) {\n      var errorText = await response.text();\n      myerror(errorText);\n      throw Error(\"Error fetching Authorization Request: \" + errorText);\n   }\n\n   // The response is plain text (actually, 'application/oauth-authz-req+jwt') but we do not check\n   var responseText = await response.text();\n   return responseText;\n}\n\n/**\n * Performs a POST request to the specified server URL either directly or via a server.\n * This is intended to support APIs which do not yet have enabled CORS. In that case,\n * we use an intermediate server to send the request.\n *\n * @param {string} serverURL - The URL of the server to send the POST request to.\n * @param {any} body - The body of the POST request. Can be a string or an object.\n * @param {string} mimetype - The MIME type of the request body. Defaults to \"application/json\".\n * @param {string} authorization - The authorization header value.\n * @returns {Promise<any>} The JSON response from the server, or undefined if the response is not JSON.\n * @throws {Error} If the server URL is not provided or if the request fails.\n */\nasync function doPOST(serverURL, body, mimetype = \"application/json\", authorization) {\n   debugger;\n   if (!serverURL) {\n      throw new Error(\"No serverURL\");\n   }\n\n   var response;\n   if (viaServer) {\n      let forwardBody = {\n         method: \"POST\",\n         url: serverURL,\n         mimetype: mimetype,\n         body: body,\n      };\n      if (authorization) {\n         forwardBody[\"authorization\"] = authorization;\n      }\n      response = await fetch(viaServer, {\n         method: \"POST\",\n         body: JSON.stringify(forwardBody),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         cache: \"no-cache\",\n      });\n   } else {\n      response = await fetch(serverURL, {\n         method: \"POST\",\n         body: JSON.stringify(body),\n         headers: {\n            \"Content-Type\": mimetype,\n         },\n         cache: \"no-cache\",\n      });\n   }\n   console.log(response);\n\n   if (response.ok) {\n      try {\n         var responseJSON = await response.json();\n         console.log(responseJSON);\n         mylog(`doPOST ${serverURL}:`, responseJSON);\n         return responseJSON;\n      } catch (error) {\n         return;\n      }\n   } else {\n      const errormsg = `doPOST ${serverURL}: ${response.status}`;\n      myerror(errormsg, body);\n      throw new Error(errormsg);\n   }\n}\n"],
  "mappings": "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",
  "names": ["html", "theHtml"]
}
