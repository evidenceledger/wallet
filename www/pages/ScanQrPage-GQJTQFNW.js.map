{
  "version": 3,
  "sources": ["../../front/src/pages/ScanQrPage.js"],
  "sourcesContent": ["import { html } from \"uhtml\";\r\nimport { getPreferredVideoDevice, getPlatformOS } from \"../components/camerainfo\";\r\n\r\nlet myerror = window.MHR.storage.myerror;\r\nlet mylog = window.MHR.storage.mylog;\r\n\r\n// This is to facilitate debugging of certificates\r\nvar testQRdata = \"HC1:NC\";\r\n\r\nvar testQR = {\r\n   text: testQRdata,\r\n};\r\n\r\n// Set the QR raw data above and enable debugging setting this flag to true\r\nvar debugging = false;\r\n\r\n// Types of QR codes that we can scan\r\nconst QR_UNKNOWN = 0; // Malformed QR, like when reading errors occurred\r\nconst QR_URL = 1; // A normal QR with a URL, like a restaurant menu\r\nconst QR_MULTI = 2; // A multi-part QR, to transmit big amounts of information\r\nconst QR_HC1 = 3; // An EU  Digital Covid Certificate\r\nconst QR_Verifiable_Presentation = \"QR_VP\"; // OpenID for Verifiable Presentation\r\nconst QR_Verifiable_Issuance = \"QR_VI\"; // OpenID for Verifiable Credential Issuance\r\nconst QR_VP_old = \"QR_VP_old\"; // Deprecated: For backwards compatibility with a Verifiable Presentation\r\nconst QR_W3C_VC = \"QR_W3C_VC\"; // Deprecated: A standard W3VC Credential\r\n\r\nMHR.register(\r\n   \"ScanQrPage\",\r\n   class extends window.MHR.AbstractPage {\r\n      displayPage; // The page name used to display the HC1 QR code\r\n      detectionInterval = 200; // Milliseconds between attempts to decode QR\r\n      videoElement = {}; // DOMElement where the video is displayed, reused across invocations\r\n      nativeBarcodeDetector; // Instance of the native barcode detector object\r\n      zxingReader; // Barcode detector in JavaScript\r\n      lastUsedCameraId; // The last used camera ID\r\n      canvasElement;\r\n      canvasSpace;\r\n\r\n      constructor(id) {\r\n         super(id);\r\n\r\n         // Check if native barcode detection is supported\r\n         if (!(\"BarcodeDetector\" in window)) {\r\n            mylog(\"Barcode Detector is not supported by this browser.\");\r\n\r\n            // Native support not available, import the ZXING javascript library\r\n            this.zxingPromise = import(\"@zxing/browser\");\r\n         } else {\r\n            mylog(\"Barcode Detector supported!\");\r\n\r\n            // create new detector\r\n            this.nativeBarcodeDetector = new BarcodeDetector({ formats: [\"qr_code\"] });\r\n         }\r\n\r\n         this.videoElement = {};\r\n         this.canvasElement = document.createElement(\"canvas\");\r\n         this.canvasSpace = this.canvasElement.getContext(\"2d\");\r\n      }\r\n\r\n      // Scan a QR and then route to the proper page to display the QR\r\n      async enter(displayPage) {\r\n         // displayPage is the page that should display the scanned QR\r\n         // If not specified, we default to the LoadAndVerifyQRVC page\r\n         if (!displayPage) {\r\n            displayPage = \"LoadAndVerifyQRVC\";\r\n         }\r\n         // Set as a local class instance variable\r\n         this.displayPage = displayPage;\r\n\r\n         // If debugging, just try to decode the test QR\r\n         if (debugging) {\r\n            await this.processQRpiece(testQR, displayPage);\r\n            return;\r\n         }\r\n\r\n         // Initialize the non-native QR reader if needed\r\n         if (!this.nativeBarcodeDetector) {\r\n            let zxing = await this.zxingPromise;\r\n            this.zxingReader = new zxing.BrowserQRCodeReader();\r\n         }\r\n\r\n         // Select the camera and store locally for later uses\r\n         this.lastUsedCameraId = await this.selectCamera();\r\n\r\n         // Display the screen with the video element\r\n         // The 'ref' in the template will set the 'current' property in the specified object\r\n         // to the video DOM element. In this case, the video DOM element can be accessed later at\r\n         // this.videoElement.current\r\n         let theHtml = html`<div class=\"w3-content\" style=\"margin:auto;max-width:500px\">\r\n            <video\r\n               style=\"max-width:500px\"\r\n               ref=${this.videoElement}\r\n               @canplay=${() => this.canPlay()}\r\n               @playing=${() => this.playing()}\r\n            ></video>\r\n         </div>`;\r\n         this.render(theHtml);\r\n\r\n         let constraints;\r\n         if (!this.lastUsedCameraId) {\r\n            mylog(\"Constraints without camera\");\r\n            constraints = {\r\n               audio: false,\r\n               video: {\r\n                  // width: { ideal: 1080, max: 1920 },\r\n                  facingMode: \"environment\",\r\n               },\r\n            };\r\n         } else {\r\n            mylog(\"Constraints with deviceID:\", this.lastUsedCameraId);\r\n            constraints = {\r\n               audio: false,\r\n               video: {\r\n                  // width: { ideal: 1080, max: 1920 },\r\n                  deviceId: this.lastUsedCameraId,\r\n               },\r\n            };\r\n         }\r\n\r\n         let stream;\r\n         try {\r\n            // Request a stream which forces the system to ask permission to the user\r\n            stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n            mylog(\"getUserMedia stream\", stream);\r\n            let videoTracks = stream.getVideoTracks();\r\n            for (let i = 0; i < videoTracks.length; i++) {\r\n               let caps = videoTracks[i].getCapabilities();\r\n               mylog(\"videotrack capabilities\", caps);\r\n            }\r\n\r\n            // Assign the camera stream to the video element in the page\r\n            // Eventually, the event 'canPlay' will be fired signallig video is ready to be displayed\r\n            this.videoElement.current.setAttribute(\"autoplay\", \"true\");\r\n            this.videoElement.current.setAttribute(\"muted\", \"true\");\r\n            this.videoElement.current.setAttribute(\"playsinline\", \"true\");\r\n            this.videoElement.current.srcObject = stream;\r\n\r\n            this.videoElement.current.style.display = \"block\";\r\n         } catch (error) {\r\n            log.error(\"Error getting stream\", error);\r\n            window.MHR.gotoPage(\"ErrorPage\", {\r\n               title: \"Error getting video stream\",\r\n               msg: \"There was an error trying to start the camera.\",\r\n            });\r\n            return;\r\n         }\r\n      }\r\n\r\n      async selectCamera() {\r\n         // Try to use the camera explicitly configured by the user\r\n         var selectedCameraId = localStorage.getItem(\"selectedCamera\");\r\n         mylog(\"User selected camera:\", selectedCameraId);\r\n\r\n         // If nothing configured, try to use last one used, if any\r\n         if (!selectedCameraId) {\r\n            selectedCameraId = this.lastUsedCameraId;\r\n            mylog(\"Last used camera:\", selectedCameraId);\r\n         }\r\n\r\n         // Some Android phones have a problem selecting automatically the best camera for scanning (eg. some Samsung)\r\n         // If we are in Android and this is the first time, try to select the most appropriate camera\r\n         // This will request permission from the user\r\n         if (!selectedCameraId && \"Android\" == getPlatformOS()) {\r\n            mylog(\"We are in Andoid and this is the first time\");\r\n            let allVideoDevices;\r\n            try {\r\n               allVideoDevices = await getPreferredVideoDevice();\r\n               mylog(\"Video devices in Android:\", allVideoDevices);\r\n            } catch (error) {\r\n               log.error(\"Error requesting camera access\", error);\r\n            }\r\n            if (allVideoDevices && allVideoDevices.defaultPreferredCamera) {\r\n               selectedCameraId = allVideoDevices.defaultPreferredCamera.deviceId;\r\n               mylog(\"Selected camera in Android:\", selectedCameraId);\r\n            }\r\n\r\n            if (!selectedCameraId) {\r\n               mylog(\"In Android and no selected camera\");\r\n            }\r\n         }\r\n\r\n         return selectedCameraId;\r\n      }\r\n\r\n      // canPlay is called when the video element is ready, so we can start detecting QR codes\r\n      async canPlay() {\r\n         mylog(\"Video can play event fired, try to detect QR\");\r\n         // The video stream is ready, show the 'video' element\r\n         this.videoElement.current.style.display = \"block\";\r\n\r\n         // Start playing the video from the camera\r\n         this.videoElement.current.play();\r\n\r\n         // Start the detector of QR codes directly in the video element\r\n         this.detectCode();\r\n      }\r\n      // canPlay is called when the video element is ready, so we can start detecting QR codes\r\n      async playing() {\r\n         mylog(\"Video is playing\");\r\n\r\n      }\r\n\r\n      // Detect code function\r\n      async detectCode() {\r\n         mylog(\"detectCode method on ScanQrPage\")\r\n         let qrType = QR_UNKNOWN;\r\n         let qrData;\r\n\r\n         // Detect QR codes in the video element\r\n         // We will try first the native detector if available (at this moment only on Android)\r\n         if (this.nativeBarcodeDetector) {\r\n            // Native BarcodeDetector is available\r\n\r\n            let codes;\r\n            try {\r\n               codes = await this.nativeBarcodeDetector.detect(this.videoElement.current);\r\n            } catch (error) {\r\n               // Log an error if one happens\r\n               log.error(error);\r\n               return;\r\n            }\r\n\r\n            // If not detected, try again\r\n            if (codes.length === 0) {\r\n               setTimeout(() => this.detectCode(), this.detectionInterval);\r\n               return;\r\n            }\r\n\r\n            // There may be several QR codes detected\r\n            // We will process the first one that is recognized\r\n            for (const barcode of codes) {\r\n               // Log the barcode to the console\r\n               mylog(barcode);\r\n               qrData = barcode.rawValue;\r\n               qrType = this.detectQRtype(qrData);\r\n               if (qrType != QR_UNKNOWN) {\r\n                  // Exit from the loop as soon as we recognize a QR type\r\n                  break;\r\n               }\r\n            }\r\n         } else {\r\n            // Native support not available, use the JavaScript library\r\n\r\n            try {\r\n               const result = await this.zxingReader.decodeOnceFromVideoElement(\r\n                  this.videoElement.current\r\n               );\r\n               qrData = result.text;\r\n               mylog(\"RESULT\", qrData);\r\n            } catch (error) {\r\n               log.error(\"ZXING decoding error\", error);\r\n            }\r\n\r\n            qrType = this.detectQRtype(qrData);\r\n         }\r\n\r\n         mylog(`QRTYPE: ${qrType}`);\r\n\r\n         if (MHR.debug) {\r\n            alert(qrData);\r\n            alert(qrType);\r\n         }\r\n\r\n         // If no QR code recognized, keep trying\r\n         if (qrType === QR_UNKNOWN) {\r\n            setTimeout(() => this.detectCode(), this.detectionInterval);\r\n            return;\r\n         }\r\n\r\n         // Handle an old format AuthenticationRequest QR\r\n         if (qrType === QR_VP_old) {\r\n            mylog(\"Old VP requested, going to \", \"AuthenticationRequestPage\", qrData);\r\n            window.MHR.gotoPage(\"AuthenticationRequestPage\", qrData);\r\n            return true;\r\n         }\r\n\r\n         // Handle an AuthenticationRequest QR\r\n         if (qrType === QR_Verifiable_Presentation) {\r\n            mylog(\"Going to \", \"AuthenticationRequestPage\", qrData);\r\n            window.MHR.gotoPage(\"AuthenticationRequestPage\", qrData);\r\n            return true;\r\n         }\r\n\r\n         // Handle HCERT data\r\n         if (qrType === QR_HC1) {\r\n            mylog(\"Going to \", \"DisplayHcert\");\r\n            window.MHR.gotoPage(\"DisplayHcert\", qrData);\r\n            return true;\r\n         }\r\n\r\n         // Handle a normal QR code with a URL\r\n         if (qrType === QR_URL) {\r\n            mylog(\"Going to \", this.displayPage);\r\n            window.MHR.gotoPage(\"DisplayNormalQR\", qrData);\r\n            return true;\r\n         }\r\n\r\n         // We scanned a QR for VC Issuance (OIDC4VCI)\r\n         if (qrType === QR_Verifiable_Issuance) {\r\n            mylog(\"Going to \", \"LoadAndSaveQRVC\");\r\n            // Create a valid URL\r\n            qrData = qrData.replace(\"openid-credential-offer://\", \"https://www.example.com/\");\r\n            window.MHR.gotoPage(\"LoadAndSaveQRVC\", qrData);\r\n            return true;\r\n         }\r\n      }\r\n\r\n      async exit() {\r\n         mylog(\"Exit method on ScanQrPage\")\r\n         if (!this.videoElement.current) {\r\n            mylog(\"No video element found\")\r\n            return;\r\n         }\r\n\r\n         // Reset the decoder just in case the camera was still working\r\n         this.videoElement.current.style.display = \"none\";\r\n\r\n         // Release resources\r\n         if (this.videoElement.current.srcObject !== undefined) {\r\n            mylog(\"releasing resources\")\r\n            this.videoElement.current.srcObject.getVideoTracks().forEach((track) => {\r\n               mylog(\"releasing track\")\r\n               track.stop();\r\n            });\r\n         }\r\n      }\r\n\r\n      // Try to detect the type of data received\r\n      detectQRtype(qrData) {\r\n         if (!qrData || !qrData.startsWith) {\r\n            log.error(\"detectQRtype: data is not string\");\r\n            return QR_UNKNOWN;\r\n         }\r\n\r\n         if (qrData.startsWith(\"multi|w3cvc|\")) {\r\n            // A multi-piece JWT\r\n            return QR_MULTI;\r\n         } else if (qrData.startsWith(\"openid4vp:\")) {\r\n            // An Authentication Request, for Verifiable Presentation\r\n            return QR_Verifiable_Presentation;\r\n         } else if (qrData.startsWith(\"openid:\")) {\r\n            // An old Authentication Request, for Verifiable Presentation\r\n            return QR_VP_old;\r\n         } else if (qrData.startsWith(\"openid-credential-offer://\")) {\r\n            // An OpenID Credential Issuance\r\n            return QR_Verifiable_Issuance;\r\n         } else if (qrData.includes(\"credential_offer_uri=\")) {\r\n            return QR_Verifiable_Issuance;\r\n         } else if (qrData.startsWith(\"VC1:\")) {\r\n            // A Verifiable Credential in raw format\r\n            return QR_W3C_VC;\r\n         } else if (qrData.startsWith(\"https\")) {\r\n            let params = new URL(qrData).searchParams;\r\n            let jar = params.get(\"jar\");\r\n            if (jar == \"yes\") {\r\n               return QR_Verifiable_Presentation;\r\n            }\r\n\r\n            // Normal QR with a URL where the real data is located\r\n            // We require secure connections with https, and do not accept http schemas\r\n            return QR_URL;\r\n         } else {\r\n            return QR_UNKNOWN;\r\n         }\r\n      }\r\n   }\r\n);\r\n\r\n// This is the state object used by the background animation routine.\r\n// Its values are set by the QR scanning initialization routine\r\nvar qrScan = {\r\n   // The page that has invoked the scan\r\n   callerPage: \"\",\r\n\r\n   // The HTML element where the video frames will be placed for analysis\r\n   canvasElement: \"\",\r\n\r\n   // The canvas context with image data\r\n   canvas: \"\",\r\n\r\n   // The element in the page to display messages about status of scanning\r\n   progressMessages: \"\",\r\n\r\n   // The page where thee coded QR will be displayed\r\n   displayQRPage: \"\",\r\n\r\n   // Page that initiated the scanning\r\n   callerType: \"\",\r\n\r\n   // To build the whole JWT from the received pieces\r\n   receivedQRPieces: [],\r\n   receivedPieces: \"\",\r\n\r\n   // The HTML element where the video stream is going to be placed\r\n   video: \"\",\r\n\r\n   // The video stream object\r\n   myStream: \"\",\r\n};\r\n\r\n// Start the camera to scan the QR\r\n// The scan can be used either by the Passenger or the Verifier\r\nexport async function initiateReceiveQRScanning(\r\n   _canvasElement,\r\n   _qrMessageElement,\r\n   _displayQRPage,\r\n   _callerType\r\n) {\r\n   // _canvasElement: DOM element where the images will be displayed\r\n   // _qrMessageElement: DOM element to display info messages\r\n   // _displayQRPage: page to switch to display contents of the QR\r\n   // _callerType: who is calling, to customise the display of the QR\r\n\r\n   // Get the current page where scanning is started\r\n   var currentPage = \"\";\r\n   if (window.history.state != null) {\r\n      currentPage = window.history.state.pageName;\r\n   }\r\n   qrScan[\"callerPage\"] = currentPage;\r\n\r\n   // The HTML element where the video frames will be placed for analysis\r\n   qrScan[\"canvasElement\"] = _canvasElement;\r\n\r\n   // Save in global variable the element to display messages about progress of scanning\r\n   qrScan[\"progressMessages\"] = _qrMessageElement;\r\n\r\n   // Save the input parameters in global variables to keep state across timer ticks\r\n   qrScan[\"displayQRPage\"] = _displayQRPage;\r\n\r\n   // Save the input parameters in global variables to keep state across timer ticks\r\n   qrScan[\"callerType\"] = _callerType;\r\n\r\n   // Reset the variables holding the received pieces\r\n   qrScan[\"receivedQRPieces\"] = [];\r\n   qrScan[\"receivedPieces\"] = new Set();\r\n\r\n   // Get the canvas context with image data and store in global variable\r\n   qrScan[\"canvas\"] = qrScan[\"canvasElement\"].getContext(\"2d\");\r\n\r\n   // Create the HTML element to place the video stream and save in global variable\r\n   qrScan[\"video\"] = document.createElement(\"video\");\r\n   //  let elwidth = Math.min(screen.availWidth - 50, 450);\r\n   //  qrScan[\"video\"].style.width = document.querySelector(\"#passengerQRScanPage .container\").clientWidth + \"px\"\r\n\r\n   // Make sure that the canvas element is hidden for the moment\r\n   qrScan[\"canvasElement\"].hidden = true;\r\n\r\n   // Display a message while we have not detected anything\r\n   qrScan[\"progressMessages\"].innerText = \"Waiting for QR .........\";\r\n\r\n   // Request permission from user to get the video stream\r\n   // Use \"facingMode: environment\" to attempt to get the main camera on phones\r\n   navigator.mediaDevices\r\n      .getUserMedia({ video: { facingMode: \"environment\" } })\r\n      .then(function (stream) {\r\n         // Store the stream in global variable for later\r\n         qrScan[\"myStream\"] = stream;\r\n\r\n         // Connect the video stream to the \"video\" element in the page\r\n         qrScan[\"video\"].srcObject = stream;\r\n         qrScan[\"video\"].setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\r\n         qrScan[\"video\"].play();\r\n\r\n         // Call the \"tick\" function on the next animation interval\r\n         //      setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n         requestAnimationFrame(ReceiveQRtick);\r\n      });\r\n}\r\n\r\n// This function is called periodically until we get a result from the scan\r\n// We use global variables to know the context on which it was called\r\nasync function ReceiveQRtick() {\r\n   try {\r\n      // Load variables for easier referencing\r\n      var video = qrScan[\"video\"];\r\n      var canvas = qrScan[\"canvas\"];\r\n      var canvasElement = qrScan[\"canvasElement\"];\r\n      var receivedPieces = qrScan[\"receivedPieces\"];\r\n      var receivedQRPieces = qrScan[\"receivedQRPieces\"];\r\n      var progressMessages = qrScan[\"progressMessages\"];\r\n      var myStream = qrScan[\"myStream\"];\r\n      var callerType = qrScan[\"callerType\"];\r\n      var callerPage = qrScan[\"callerPage\"];\r\n      var displayQRPage = qrScan[\"displayQRPage\"];\r\n\r\n      var currentPage = \"\";\r\n      if (window.history.state != null) {\r\n         currentPage = window.history.state.pageName;\r\n      }\r\n      // Ckeck if we are running in the context of the page that initiated scanning\r\n      if (currentPage != callerPage) {\r\n         // The user navigated out of the scan page, should stop using the camera\r\n         stopMediaTracks(myStream);\r\n\r\n         // Return without activating the callback again, so it will stop completely\r\n         return;\r\n      }\r\n\r\n      // We have to wait until the video stream is ready\r\n      if (video.readyState !== video.HAVE_ENOUGH_DATA) {\r\n         // We are not yet ready\r\n\r\n         // Request to be called again in next frame\r\n         //      setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n         requestAnimationFrame(ReceiveQRtick);\r\n\r\n         // Exit from the function until it will be called again\r\n         return;\r\n      }\r\n\r\n      // Video is ready, display canvas\r\n      canvasElement.hidden = false;\r\n\r\n      // Set the canvas size to match the video stream\r\n      canvasElement.height = video.videoHeight;\r\n      canvasElement.width = video.videoWidth;\r\n      //let elwidth = Math.min(screen.availWidth - 60, 350);\r\n      let displayWidth = video.videoWidth;\r\n      let displayHeight = video.videoHeight;\r\n\r\n      // Get a video frame and decode an image data using the canvas element\r\n      canvas.drawImage(video, 0, 0, displayWidth, displayHeight);\r\n      var imageData = canvas.getImageData(0, 0, displayWidth, displayHeight);\r\n\r\n      try {\r\n         // Try to decode the image as a QR code\r\n         var code = jsQR(imageData.data, imageData.width, imageData.height, {\r\n            inversionAttempts: \"dontInvert\",\r\n         });\r\n      } catch (error) {\r\n         console.error(\"jsQR:\", error);\r\n      }\r\n\r\n      // If unsuccessful, exit requesting to be called again at next animation frame\r\n      if (!code) {\r\n         // Request to be called again in next frame\r\n         //      setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n         requestAnimationFrame(ReceiveQRtick);\r\n\r\n         // Exit from the function\r\n         return;\r\n      }\r\n\r\n      // If we reached up to here, we have a valid QR\r\n\r\n      // Try to detect the type of data received\r\n      var qrType = detectQRtype(code.data);\r\n      if (qrType == \"unknown\") {\r\n         // We do not know what type it is. Continue scanning\r\n\r\n         // Request to be called again in next frame\r\n         //      setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n         requestAnimationFrame(ReceiveQRtick);\r\n\r\n         // Exit from the function\r\n         return;\r\n      }\r\n\r\n      if (qrType == \"MultiJWT\") {\r\n         mylog(\"Scanned MultiJWT QR\");\r\n         // We are going to receive a series of QRs and then join the pieces together\r\n         // Each piece has the format: \"xx|yy|data\" where\r\n         //   xx is the total number of pieces to receive, expressed as two decimal digits\r\n         //   yy is the index of this piece in the whole data, expressed as two decimal digits\r\n         //   data is the actual data of the piece\r\n\r\n         // Split the data in the QR in the components\r\n         var components = code.data.split(\"|\");\r\n\r\n         // The first and second components are \"multi\" and \"w3cvc\" and we do not need them\r\n\r\n         // The third component is the total number of pieces to receive\r\n         var total = components[2];\r\n\r\n         // The fourth is the index of the received component\r\n         var index = components[3];\r\n\r\n         // And the fifth is the actual piece of data\r\n         var piece = components[4];\r\n\r\n         // Check if we received two integers each with two digits, from \"00\" to \"99\"\r\n         // ASCII code for \"0\" is 48 and for \"9\" is 57\r\n         var total1 = total.charCodeAt(0);\r\n         var total2 = total.charCodeAt(1);\r\n         var index1 = index.charCodeAt(0);\r\n         var index2 = index.charCodeAt(1);\r\n         if (\r\n            total1 < 48 ||\r\n            total1 > 57 ||\r\n            total2 < 48 ||\r\n            total2 > 57 ||\r\n            index1 < 48 ||\r\n            index1 > 57 ||\r\n            index2 < 48 ||\r\n            index2 > 57\r\n         ) {\r\n            // Invalid data received, keep trying\r\n            // Request to be called again in next frame\r\n            //        setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n            requestAnimationFrame(ReceiveQRtick);\r\n\r\n            // Exit from the function\r\n            return;\r\n         }\r\n\r\n         // Check if we already received this piece\r\n         if (receivedPieces.has(index)) {\r\n            // Already received, continue scanning\r\n\r\n            // Request to be called again in next frame\r\n            //        setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n            requestAnimationFrame(ReceiveQRtick);\r\n\r\n            // Exit from the function\r\n            return;\r\n         }\r\n\r\n         // This is a new piece. Add it to the set\r\n         receivedPieces.add(index);\r\n         receivedQRPieces[+index] = piece; // Make sure that index is considered an integer and not a string\r\n\r\n         // Display in the page the number of the object received.\r\n         progressMessages.innerText = \"Received piece: \" + index;\r\n\r\n         // Check if we need more pieces\r\n         if (receivedPieces.size < total) {\r\n            // Continue scanning\r\n\r\n            // Request to be called again in next frame\r\n            //        setTimeout(ReceiveQRtick, scanRefreshInterval);\r\n            requestAnimationFrame(ReceiveQRtick);\r\n\r\n            // Exit from the function\r\n            return;\r\n         }\r\n\r\n         // We have received all pieces\r\n\r\n         // Stop the media stream\r\n         stopMediaTracks(myStream);\r\n\r\n         // Hide the picture\r\n         canvasElement.hidden = true;\r\n\r\n         mylog(\"Received all pieces\", receivedQRPieces);\r\n\r\n         // Assemble all pieces together\r\n         var jwt = receivedQRPieces.join(\"\");\r\n         mylog(\"Received jwt\", jwt);\r\n\r\n         // Extract the credential and save in the temporary storage\r\n         try {\r\n            var cred = decodeJWT(jwt);\r\n\r\n            // Store in temporal storage so the page will retrieve it\r\n            let currentCredential = {\r\n               type: \"w3cvc\",\r\n               encoded: jwt,\r\n               decoded: cred,\r\n            };\r\n            mylog(\"Writing current cred: \", currentCredential);\r\n            await settingsPut(\"currentCredential\", currentCredential);\r\n         } catch (error) {\r\n            myerror(error);\r\n            progressMessages.innerText = error;\r\n            return;\r\n         }\r\n\r\n         // Switch to the presentation of results\r\n         window.MHR.gotoPage(displayQRPage, { screenType: callerType });\r\n\r\n         return;\r\n      }\r\n\r\n      if (qrType == \"URL\") {\r\n         // We received a URL in the QR. Perform a GET to obtain the JWT from a server\r\n         mylog(\"Scanned normal URL QR\");\r\n\r\n         // Stop the media stream\r\n         stopMediaTracks(myStream);\r\n\r\n         // Build the URL to call\r\n         let targetURLRead = code.data.trim();\r\n\r\n         // Check if the URL points to a JWT or to the wallet\r\n         if (targetURLRead.startsWith(MYSELF)) {\r\n            // The URL points to the wallet. We should have received a param with the credential id\r\n            const url = new URL(targetURLRead);\r\n\r\n            // First we check for a normal credential\r\n            let credId = url.searchParams.get(\"id\");\r\n            if (credId) {\r\n               targetURLRead = ISSUER_GET_CREDENTIAL + credId;\r\n            } else {\r\n               // Now check for a Public Credential\r\n               credId = url.searchParams.get(\"pubid\");\r\n               if (credId) {\r\n                  targetURLRead = ISSUER_GET_PUBLIC_CREDENTIAL + credId;\r\n               }\r\n            }\r\n         }\r\n\r\n         // Retrieve the credential from the server and display it\r\n         await requestQRAndDisplay(targetURLRead, displayQRPage, callerType);\r\n\r\n         return;\r\n      }\r\n\r\n      const HC_ISS = 1;\r\n      const HC_IAT = 6;\r\n      const HC_EXP = 4;\r\n      const HC_CTI = 7;\r\n      const HC_HCERT = -260;\r\n\r\n      if (qrType == \"HC1\") {\r\n         // We received a Health Certificate (HC) version 1 encoded QR.\r\n         mylog(\"Scanned HC1 QR\");\r\n\r\n         let plain = await CWT.decodeHC1QR(code.data);\r\n         mylog(\"CWT.decodeHC1QR\", plain);\r\n\r\n         // Store in temporal storage so the page will retrieve it\r\n         let currentCredential = {\r\n            type: \"hcert\",\r\n            encoded: code.data,\r\n            decoded: plain,\r\n         };\r\n         await settingsPut(\"currentCredential\", currentCredential);\r\n\r\n         // Stop the media stream\r\n         stopMediaTracks(myStream);\r\n\r\n         // Switch to the presentation of results\r\n         window.MHR.gotoPage(displayQRPage, { screenType: callerType });\r\n\r\n         return;\r\n      }\r\n\r\n      if (qrType == \"Base64\") {\r\n         // We received a Base64 encoded QR. May be it is the UK Immigration document\r\n         mylog(\"Scanned Base64 simple QR\");\r\n\r\n         let decodedQR = JSON.parse(atobUrl(code.data));\r\n\r\n         // Store in temporal storage so the page will retrieve it\r\n         let currentCredential = {\r\n            type: \"ukimmigration\",\r\n            encoded: code.data,\r\n            decoded: decodedQR,\r\n         };\r\n         await settingsPut.setItem(\"currentCredential\", currentCredential);\r\n\r\n         // Stop the media stream\r\n         stopMediaTracks(myStream);\r\n\r\n         // Switch to the presentation of results\r\n         window.MHR.gotoPage(displayQRPage, { screenType: callerType });\r\n\r\n         return;\r\n      }\r\n   } catch (error) {\r\n      // Stop the media stream\r\n      stopMediaTracks(myStream);\r\n\r\n      console.error(error);\r\n      alert(`Error: ${error}`);\r\n\r\n      // Go to the home page to start again\r\n      window.MHR.gotoPage(homePage);\r\n\r\n      // Exit from the function\r\n      return;\r\n   }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
