{
  "version": 3,
  "sources": ["../../front/src/pages/AuthenticationRequestPage.js"],
  "sourcesContent": ["import { Base64 } from \"../components/aggregated.js\";\nimport { decodeUnsafeJWT } from \"../components/aggregated.js\";\nimport { renderAnyCredentialCard } from \"../components/aggregated.js\";\nimport { signJWT } from \"../components/aggregated.js\";\n\n// @ts-ignore\nconst MHR = globalThis.MHR;\n\n// Copy some globals to make code less verbose\nlet gotoPage = MHR.gotoPage;\nlet goHome = MHR.goHome;\nlet storage = MHR.storage;\nlet myerror = globalThis.MHR.storage.myerror;\nlet mylog = globalThis.MHR.storage.mylog;\nlet html = MHR.html;\n\nvar debug = localStorage.getItem(\"MHRdebug\") == \"true\";\n\n// Make all requests via the server instead of from the JavaScript client\nconst viaServer = \"https://wallet.mycredential.eu/serverhandler\";\nvar proxyIssuer = true;\n\n// We will perform SIOP/OpenID4VP Authentication flow\nMHR.register(\n   \"AuthenticationRequestPage\",\n   class extends MHR.AbstractPage {\n      WebAuthnSupported = false;\n      PlatformAuthenticatorSupported = false;\n\n      constructor(id) {\n         super(id);\n      }\n\n      /**\n       * @param {string} openIdUrl The url for an OID4VP Authentication Request\n       */\n      async enter(openIdUrl) {\n         let html = this.html;\n         proxyIssuer = localStorage.getItem(\"proxyIssuer\") == \"true\";\n\n         if (debug) {\n            alert(`SelectCredential: ${openIdUrl}`);\n         }\n\n         mylog(\"Inside AuthenticationRequestPage:\", openIdUrl);\n         if (openIdUrl == null) {\n            myerror(\"No URL has been specified\");\n            this.showError(\"Error\", \"No URL has been specified\");\n            return;\n         }\n\n         // Check whether current browser supports WebAuthn\n         if (globalThis.PublicKeyCredential) {\n            console.log(\"WebAuthn is supported\");\n            this.WebAuthnSupported = true;\n\n            // Check for PlatformAuthenticator\n            let available =\n               await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n            if (available) {\n               this.PlatformAuthenticatorSupported = true;\n            }\n         } else {\n            console.log(\"WebAuthn NOT supported\");\n         }\n\n         // Derive from the received URL a simple one ready for parsing.\n         // We do not use the host name for anything, except to make happy the url parser.\n         // The \"interesting\" part is in the query parameters.\n         openIdUrl = openIdUrl.replace(\"openid4vp://?\", \"https://wallet.example.com/?\");\n\n         // Convert the input string to a URL object\n         const inputURL = new URL(openIdUrl);\n         if (debug) {\n            alert(inputURL);\n         }\n\n         // The URL can have two formats:\n         // 1. An OpenId url with an Authentication Request object specified in the query parameters\n         // 2. A url specifying a reference to an Authentication Request object, using 'request_uri'\n         //\n         // We detect which one is it by looking at the query parameters:\n         // 1. If 'request_uri' is in the url, then the AR is by reference, and the object can be retrieved\n         //    by fetching the object.\n         // 2. Otherwise, the AR object is in the url. We do not yet support this.\n\n         // Get the relevant parameters from the query string\n         const params = new URLSearchParams(inputURL.search);\n\n         // The request_uri will be used to retrieve the AR from the Verifier\n         var request_uri = params.get(\"request_uri\");\n         if (!request_uri) {\n            gotoPage(\"ErrorPage\", {\n               title: \"Error\",\n               msg: \"'request_uri' parameter not found in URL\",\n            });\n            return;\n         }\n\n         // It is URLEncoded\n         request_uri = decodeURIComponent(request_uri);\n\n         if (debug) {\n            alert(request_uri);\n         }\n\n         // Retrieve the AR from the Verifier\n         const authRequestJWT = await getAuthRequest(request_uri);\n         if (!authRequestJWT) {\n            mylog(\"authRequest is null, aborting\");\n            return;\n         }\n         if (authRequestJWT == \"error\") {\n            alert(\"checking error after getAuthRequestDelegated\");\n            this.showError(\"Error\", \"Error fetching Authorization Request\");\n            return;\n         }\n         console.log(authRequestJWT);\n\n         if (debug) {\n            this.displayAR(authRequestJWT);\n         } else {\n            await this.displayCredentials(authRequestJWT);\n         }\n         return;\n      }\n\n      /**\n       * Displays the Authentication Request (AR) details on the UI, for debugging purposes\n       *\n       * @param {string} authRequestJWT - The JWT containing the Authentication Request.\n       * @returns {<void>}\n       */\n      displayAR(authRequestJWT) {\n         let html = this.html;\n\n         // The AR is in the payload of the received JWT\n         const authRequest = decodeUnsafeJWT(authRequestJWT);\n         mylog(\"Decoded authRequest\", authRequest);\n         var ar = authRequest.body;\n\n         let theHtml = html`\n            <div class=\"margin-small text-small\">\n               <p><b>client_id: </b>${ar.client_id}</p>\n               <p><b>client_id_scheme: </b>${ar.client_id_schemne}</p>\n               <p><b>response_uri: </b>${ar.response_uri}</p>\n               <p><b>response_type: </b>${ar.response_type}</p>\n               <p><b>response_mode: </b>${ar.response_mode}</p>\n               <p><b>nonce: </b>${ar.nonce}</p>\n               <p><b>state: </b>${ar.state}</p>\n               <p><b>scope: </b>${ar.scope}</p>\n\n               <div class=\"ion-margin-start ion-margin-bottom\">\n                  <ion-button @click=${() => this.displayCredentials(authRequestJWT)}\n                     >Continue\n                  </ion-button>\n               </div>\n            </div>\n         `;\n         this.render(theHtml);\n      }\n\n      /**\n       * Displays the credentials that the user has in the Wallet and that match the requested type in the AR.\n       * The user must select the one he wants to send to the Verifier, or cancel the operation\n       *\n       * @param {string} authRequestJWT - The JWT containing the Authentication Request.\n       * @returns {Promise<void>} A promise that resolves when the list of credentials are rendered.\n       */\n      async displayCredentials(authRequestJWT) {\n         // TODO: verify the signature and that the signer is the expected one and that it is in the\n         // corresponding trusted list.\n\n         // The AR is in the payload of the received JWT\n         const authRequest = decodeUnsafeJWT(authRequestJWT);\n         mylog(\"Decoded authRequest\", authRequest);\n         var ar = authRequest.body;\n\n         // response_uri is the endpoint where we have to send the Authentication Response\n         // We are going to extract the RP identity from that URL\n         var rpURL = new URL(ar.response_uri);\n         mylog(\"rpURL\", rpURL);\n         var rpDomain = rpURL.hostname;\n\n         // Retrieve all credentials from storage, to process them in memory\n         var credStructs = await storage.credentialsGetAllRecent();\n         if (!credStructs) {\n            let theHtml = html`\n               <div class=\"w3-panel w3-margin w3-card w3-center w3-round color-error\">\n                  <p>You do not have a Verifiable Credential.</p>\n                  <p>Please go to an Issuer to obtain one.</p>\n               </div>\n            `;\n            this.render(theHtml);\n            return;\n         }\n\n         // We use scope to ask for a specific type of credential, using a hierarchical dotted path\n         // Get the last segment of the credential type in 'scope'\n         const scopeParts = ar.scope.split(\".\");\n         if (scopeParts.length == 0) {\n            myerror(\"Invalid scope specified\");\n            this.showError(\"Error\", \"Invalid scope specified\");\n            return;\n         }\n         const displayCredType = scopeParts[scopeParts.length - 1];\n\n         // Select all credentials of the requested type\n         var credentials = [];\n         for (const cc of credStructs) {\n            // The credential is of type 'vc_jwt_json'. The 'vc' claim was stored in the 'decoded' field in storage.\n            const vc = cc.decoded;\n            mylog(vc);\n\n            // The type array of the VC\n            const vctype = vc.type;\n            mylog(\"vctype:\", vctype);\n\n            // The credential type requested by the Verifier must be in the type array of the VC\n            if (vctype.includes(displayCredType)) {\n               mylog(\"adding credential\");\n               credentials.push(cc);\n            }\n         }\n\n         // Error message if no credentials satisfy the condition\n         if (credentials.length == 0) {\n            var msg = html`\n               <p>\n                  <b>${rpDomain}</b> has requested a Verifiable Credential of type\n                  ${displayCredType}, but you do not have any credential of that type.\n               </p>\n               <p>Please go to an Issuer to obtain one.</p>\n            `;\n            this.showError(\"Error\", msg);\n            return;\n         }\n\n         let theHtml = html`\n            <ion-card color=\"warning\">\n               <ion-card-header>\n                  <ion-card-title>Authentication Request</ion-card-title>\n               </ion-card-header>\n               <ion-card-content>\n                  <b>${rpDomain}</b> has requested a Verifiable Credential of type\n                  ${displayCredType}. Use one of the credentials below to authenticate.\n               </ion-card-content>\n            </ion-card>\n\n            ${credentials.map(\n               (cred) =>\n                  html`${this.vcToHtml(\n                     cred,\n                     ar.nonce,\n                     ar.response_uri,\n                     ar.state,\n                     this.WebAuthnSupported\n                  )}`\n            )}\n         `;\n         this.render(theHtml);\n      }\n\n      // Render the credential with buttons so the user can select it for authentication\n      vcToHtml(cc, nonce, response_uri, state, webAuthnSupported) {\n         // TODO: retrieve the holder and its private key from DB\n\n         // Get the holder that will present the credential\n         // We get this from the credential subject\n         mylog(\"in VCToHTML\");\n         const vc = cc.decoded;\n         mylog(vc);\n         const holder = vc.credentialSubject?.mandate?.mandatee?.id;\n         mylog(\"holder:\", holder);\n\n         // A Verifiable Presentation can send more than one credential. We only send one.\n         var credentials = [cc.encoded];\n\n         // Each credential has a button to allow the user to send it to the Verifier\n         const div = html`\n            <ion-card>\n               ${renderAnyCredentialCard(vc)}\n\n               <div class=\"ion-margin-start ion-margin-bottom\">\n                  <ion-button @click=${() => MHR.cleanReload()}>\n                     <ion-icon slot=\"start\" name=\"chevron-back\"></ion-icon>\n                     ${T(\"Cancel\")}\n                  </ion-button>\n\n                  <ion-button\n                     @click=${(e) =>\n                        this.sendAuthenticationResponse(\n                           e,\n                           holder,\n                           response_uri,\n                           credentials,\n                           state,\n                           nonce,\n                           webAuthnSupported\n                        )}\n                  >\n                     <ion-icon slot=\"start\" name=\"paper-plane\"></ion-icon>\n                     ${T(\"Send Credential\")}\n                  </ion-button>\n               </div>\n            </ion-card>\n         `;\n\n         return div;\n      }\n\n      // sendAuthenticationResponse prepares an Authentication Response and sends it to the server as specified in the endpoint\n      async sendAuthenticationResponse(\n         e,\n         holder,\n         response_uri,\n         credentials,\n         state,\n         nonce,\n         webAuthnSupported\n      ) {\n         e.preventDefault();\n         debugger;\n\n         var domedid = localStorage.getItem(\"domedid\");\n         domedid = JSON.parse(domedid);\n\n         const endpointURL = new URL(response_uri);\n         const origin = endpointURL.origin;\n\n         mylog(\"sending AuthenticationResponse to:\", response_uri);\n\n         const uuid = globalThis.crypto.randomUUID();\n         const now = Math.floor(Date.now() / 1000);\n\n         const didIdentifier = holder.substring(\"did:key:\".length);\n\n         var jwtHeaders = {\n            kid: holder + \"#\" + didIdentifier,\n            typ: \"JWT\",\n            alg: \"ES256\",\n         };\n\n         // Create the vp_token structure\n         var vpClaim = {\n            context: [\"https://www.w3.org/ns/credentials/v2\"],\n            type: [\"VerifiablePresentation\"],\n            id: uuid,\n            verifiableCredential: credentials,\n            holder: holder,\n         };\n\n         var vp_token_payload = {\n            jti: uuid,\n            sub: holder,\n            aud: \"https://self-issued.me/v2\",\n            iat: now,\n            nbf: now,\n            exp: now + 480,\n            iss: holder,\n            nonce: nonce,\n            vp: vpClaim,\n         };\n\n         const jwt = await signJWT(jwtHeaders, vp_token_payload, domedid.privateKey);\n         const vp_token = Base64.encodeURI(jwt);\n         mylog(\"The encoded vpToken \", vp_token);\n\n         // var formBody =\n         //    \"vp_token=\" +\n         //    vp_token +\n         //    \"&state=\" +\n         //    state +\n         //    \"&presentation_submission=\" +\n         //    Base64.encodeURI(JSON.stringify(presentationSubmissionJSON()));\n         var formBody = \"vp_token=\" + vp_token + \"&state=\" + state;\n         mylog(formBody);\n\n         debugger;\n         try {\n            const response = await doPOST(\n               response_uri,\n               formBody,\n               \"application/x-www-form-urlencoded\"\n            );\n            await gotoPage(\"AuthenticationResponseSuccess\");\n         } catch (error) {\n            myerror(error);\n            this.showError(\"Error authenticating\", error.message);\n         }\n         return;\n      }\n   }\n);\n\nwindow.MHR.register(\n   \"AuthenticationResponseSuccess\",\n   class extends window.MHR.AbstractPage {\n      constructor(id) {\n         super(id);\n      }\n\n      enter(pageData) {\n         let html = this.html;\n\n         // Display the title and message, with a button that goes to the home page\n         let theHtml = html`\n            <ion-card>\n               <ion-card-header>\n                  <ion-card-title>Authentication success</ion-card-title>\n               </ion-card-header>\n\n               <ion-card-content class=\"ion-padding-bottom\">\n                  <div class=\"text-larger\">The authentication process has been completed</div>\n               </ion-card-content>\n\n               <div class=\"ion-margin-start ion-margin-bottom\">\n                  <ion-button @click=${() => window.MHR.cleanReload()}>\n                     <ion-icon slot=\"start\" name=\"home\"></ion-icon>\n                     ${T(\"Home\")}\n                  </ion-button>\n               </div>\n            </ion-card>\n         `;\n\n         this.render(theHtml);\n      }\n   }\n);\n\nvar apiPrefix = \"/webauthn\";\n\n// registerUser asks the authenticator device where the wallet is running for a new WebAuthn credential\n// and sends the new credential to the server, which will store it associated to the user+device\nasync function registerUser(origin, username, state) {\n   try {\n      // Get from the server the CredentialCreationOptions\n      // It will be associated to the username that corresponds to the current state, which is the\n      // username inside the credential that was sent to the Verifier\n      var response = await fetch(\n         origin + apiPrefix + \"/register/begin/\" + username + \"?state=\" + state,\n         {\n            mode: \"cors\",\n         }\n      );\n      if (!response.ok) {\n         var errorText = await response.text();\n         mylog(errorText);\n         return \"error\";\n      }\n      var responseJSON = await response.json();\n      var credentialCreationOptions = responseJSON.options;\n\n      // This request is associated to a session in the server. We will send the response associated to that session\n      // so the server can match the reply with the request\n      var session = responseJSON.session;\n\n      mylog(\"Received CredentialCreationOptions\", credentialCreationOptions);\n      mylog(\"Session:\", session);\n\n      // Decode the fields that are b64Url encoded for transmission\n      credentialCreationOptions.publicKey.challenge = bufferDecode(\n         credentialCreationOptions.publicKey.challenge\n      );\n      credentialCreationOptions.publicKey.user.id = bufferDecode(\n         credentialCreationOptions.publicKey.user.id\n      );\n\n      // Decode each of the excluded credentials\n      // This is a list of existing credentials in the server, to avoid the authenticator creating a new one\n      // if the server already has a credential for this authenticator\n      if (credentialCreationOptions.publicKey.excludeCredentials) {\n         for (var i = 0; i < credentialCreationOptions.publicKey.excludeCredentials.length; i++) {\n            credentialCreationOptions.publicKey.excludeCredentials[i].id = bufferDecode(\n               credentialCreationOptions.publicKey.excludeCredentials[i].id\n            );\n         }\n      }\n\n      // Make the Authenticator create the credential\n      mylog(\"creating new Authenticator credential\");\n      try {\n         var credential = await navigator.credentials.create({\n            publicKey: credentialCreationOptions.publicKey,\n         });\n      } catch (error) {\n         myerror(error);\n         return error;\n      }\n\n      mylog(\"Authenticator created Credential\", credential);\n\n      // Get the fields that we should encode for transmission to the server\n      let attestationObject = credential.response.attestationObject;\n      let clientDataJSON = credential.response.clientDataJSON;\n      let rawId = credential.rawId;\n\n      // Create the object to send\n      var data = {\n         id: credential.id,\n         rawId: bufferEncode(rawId),\n         type: credential.type,\n         response: {\n            attestationObject: bufferEncode(attestationObject),\n            clientDataJSON: bufferEncode(clientDataJSON),\n         },\n      };\n\n      var wholeData = {\n         response: data,\n         session: session,\n      };\n\n      // Perform a POST to the server\n      mylog(\"sending Authenticator credential to server\");\n      var response = await fetch(\n         origin + apiPrefix + \"/register/finish/\" + username + \"?state=\" + state,\n         {\n            method: \"POST\",\n            headers: {\n               \"Content-Type\": \"application/json\",\n               session_id: session,\n            },\n            mode: \"cors\",\n            body: JSON.stringify(wholeData), // body data type must match \"Content-Type\" header\n         }\n      );\n      if (!response.ok) {\n         var errorText = await response.text();\n         mylog(errorText);\n         return \"error\";\n      }\n\n      mylog(\"Authenticator credential sent successfully to server\");\n      return;\n   } catch (error) {\n      myerror(error);\n      return error;\n   }\n}\n\nasync function loginUser(origin, username, state) {\n   try {\n      // Get from the server the CredentialRequestOptions\n      var response = await fetch(\n         origin + apiPrefix + \"/login/begin/\" + username + \"?state=\" + state,\n         {\n            mode: \"cors\",\n         }\n      );\n      if (!response.ok) {\n         myerror(\"error requesting CredentialRequestOptions\", response.status);\n         return \"error\";\n      }\n\n      var responseJSON = await response.json();\n      var credentialRequestOptions = responseJSON.options;\n      var session = responseJSON.session;\n\n      mylog(\"Received CredentialRequestOptions\", credentialRequestOptions);\n\n      // Decode the challenge from the server\n      credentialRequestOptions.publicKey.challenge = bufferDecode(\n         credentialRequestOptions.publicKey.challenge\n      );\n\n      // Decode each of the allowed credentials\n      credentialRequestOptions.publicKey.allowCredentials.forEach(function (listItem) {\n         listItem.id = bufferDecode(listItem.id);\n      });\n\n      // Call the authenticator to create the assertion\n      try {\n         var assertion = await navigator.credentials.get({\n            publicKey: credentialRequestOptions.publicKey,\n         });\n         if (assertion == null) {\n            myerror(\"null assertion received from authenticator device\");\n            return \"error\";\n         }\n      } catch (error) {\n         // Log and present the error page\n         myerror(error);\n         return error;\n      }\n\n      mylog(\"Authenticator created Assertion\", assertion);\n\n      // Get the fields that we should encode for transmission to the server\n      let authData = assertion.response.authenticatorData;\n      let clientDataJSON = assertion.response.clientDataJSON;\n      let rawId = assertion.rawId;\n      let sig = assertion.response.signature;\n      let userHandle = assertion.response.userHandle;\n\n      // Create the object to send\n      var data = {\n         id: assertion.id,\n         rawId: bufferEncode(rawId),\n         type: assertion.type,\n         response: {\n            authenticatorData: bufferEncode(authData),\n            clientDataJSON: bufferEncode(clientDataJSON),\n            signature: bufferEncode(sig),\n            userHandle: bufferEncode(userHandle),\n         },\n      };\n\n      // The wrapper object for the POST body\n      var wholeData = {\n         response: data,\n         session: session,\n      };\n\n      // Perform a POST to the server\n      try {\n         var response = await fetch(\n            origin + apiPrefix + \"/login/finish/\" + username + \"?state=\" + state,\n            {\n               method: \"POST\",\n               headers: {\n                  \"Content-Type\": \"application/json\",\n                  session_id: session,\n               },\n               mode: \"cors\",\n               body: JSON.stringify(wholeData),\n            }\n         );\n\n         if (!response.ok) {\n            var errorText = await response.text();\n            mylog(errorText);\n            return \"error\";\n         }\n\n         return;\n      } catch (error) {\n         myerror(error);\n         return error;\n      }\n   } catch (error) {\n      myerror(error);\n      return error;\n   }\n}\n\n// This is the predefined PresentationSubmission in DOME\nfunction presentationSubmissionJSON() {\n   return {\n      definition_id: \"SingleCredentialPresentation\",\n      id: \"SingleCredentialSubmission\",\n      descriptor_map: [\n         {\n            id: \"single_credential\",\n            path: \"$\",\n            format: \"jwt_vp_json\",\n            path_nested: {\n               format: \"jwt_vc_json\",\n               path: \"$.verifiableCredential[0]\",\n            },\n         },\n      ],\n   };\n}\n\n// Base64 to ArrayBuffer\nfunction bufferDecode(value) {\n   return Uint8Array.from(atob(value), (c) => c.charCodeAt(0));\n}\n\n// ArrayBuffer to URLBase64\nfunction bufferEncode(value) {\n   return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=/g, \"\");\n}\n\n/**\n * Retrieves the Authorization Request from the Verifier at the uri specified\n * https://www.rfc-editor.org/rfc/rfc9101.html#section-5.2.3\n *\n * @param {string} uri - The uri of the server\n * @returns {Promise<string>} The Authorization Request as a JWT\n */\nasync function getAuthRequest(uri) {\n   mylog(\"Fetching AuthReq from\", uri);\n\n   var response = await fetch(uri);\n\n   if (!response.ok) {\n      var errorText = await response.text();\n      myerror(errorText);\n      throw Error(\"Error fetching Authorization Request: \" + errorText);\n   }\n\n   // The response is plain text (actually, 'application/oauth-authz-req+jwt') but we do not check\n   var responseText = await response.text();\n   return responseText;\n}\n\n/**\n * Performs a POST request to the specified server URL either directly or via a server.\n * This is intended to support APIs which do not yet have enabled CORS. In that case,\n * we use an intermediate server to send the request.\n *\n * @param {string} serverURL - The URL of the server to send the POST request to.\n * @param {any} body - The body of the POST request. Can be a string or an object.\n * @param {string} mimetype - The MIME type of the request body. Defaults to \"application/json\".\n * @param {string} authorization - The authorization header value.\n * @returns {Promise<any>} The JSON response from the server, or undefined if the response is not JSON.\n * @throws {Error} If the server URL is not provided or if the request fails.\n */\nasync function doPOST(serverURL, body, mimetype = \"application/json\", authorization) {\n   debugger;\n   if (!serverURL) {\n      throw new Error(\"No serverURL\");\n   }\n\n   var response;\n   if (proxyIssuer) {\n      let forwardBody = {\n         method: \"POST\",\n         url: serverURL,\n         mimetype: mimetype,\n         body: body,\n      };\n      if (authorization) {\n         forwardBody[\"authorization\"] = authorization;\n      }\n      response = await fetch(viaServer, {\n         method: \"POST\",\n         body: JSON.stringify(forwardBody),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         cache: \"no-cache\",\n      });\n   } else {\n      response = await fetch(serverURL, {\n         method: \"POST\",\n         body: JSON.stringify(body),\n         headers: {\n            \"Content-Type\": mimetype,\n         },\n         cache: \"no-cache\",\n      });\n   }\n   console.log(response);\n\n   if (response.ok) {\n      try {\n         var responseJSON = await response.json();\n         console.log(responseJSON);\n         mylog(`doPOST ${serverURL}:`, responseJSON);\n         return responseJSON;\n      } catch (error) {\n         return;\n      }\n   } else if (response.status == 401) {\n      throw new Error(\"Unauthorized\");\n   } else {\n      myerror(`Error in request to server (${serverURL}): ${response.statusText}`, body);\n      throw new Error(\"Error in request to server\");\n   }\n}\n"],
  "mappings": "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",
  "names": ["html", "theHtml"]
}
