{
  "version": 3,
  "sources": ["../../front/src/pages/MicroWallet.js"],
  "sourcesContent": ["// @ts-check\r\n\r\n/**\r\n * MicroWallet is the main page of the wallet application.\r\n * It shows the list of credentials stored in the wallet,\r\n * and allows the user to scan a QR code to add a new credential or authenticate\r\n * to a RelyingParty\r\n */\r\n\r\nimport { renderAnyCredentialCard } from \"../components/aggregated.js\";\r\nimport { generateDidKeyDOME } from \"../components/aggregated.js\";\r\nimport { verifyJWT, signJWT } from \"../components/aggregated.js\";\r\nimport { decodeUnsafeJWT } from \"../components/aggregated.js\";\r\nimport { credentialsSave } from \"../components/aggregated.js\";\r\n\r\n// Enable to debug the application\r\nvar debug = false;\r\n\r\n\r\nMHR.register(\r\n   \"MicroWallet\",\r\n   class extends MHR.AbstractPage {\r\n      /**\r\n       * @param {string} id\r\n       */\r\n      constructor(id) {\r\n         super(id);\r\n      }\r\n\r\n      async enter() {\r\n         mylog(\"MicroWallet\", globalThis.document.location);\r\n\r\n         // Check if we are debugging the application\r\n         debug = localStorage.getItem(\"MHRdebug\") == \"true\";\r\n\r\n         // Set the default state of the proxy issuer server\r\n         if (localStorage.getItem(\"proxyIssuer\") === null) {\r\n            localStorage.setItem(\"proxyIssuer\", \"true\")\r\n         }\r\n\r\n         // TODO: generate a default did:key the first time the wallet is used,\r\n         // and give the user the possibility to create a new one when issuing\r\n         // a new credential which has to be bound to the user.\r\n         // And move the code to a component.\r\n\r\n         // Generate a did:key if it does not exist yet\r\n         var domedid;\r\n         domedid = localStorage.getItem(\"domedid\");\r\n         if (domedid == null) {\r\n            domedid = await generateDidKeyDOME();\r\n            localStorage.setItem(\"domedid\", JSON.stringify(domedid));\r\n         } else {\r\n            domedid = JSON.parse(domedid);\r\n         }\r\n\r\n         mylog(\"My DID\", domedid.did);\r\n\r\n         let html = this.html;\r\n\r\n         // The wallet supports several ways to receive a QR code:\r\n         // 1. Scanning with the camera. The QR is decoded with an image decoding\r\n         //    engine, the type of QR is detected (issuance, authentication, other, ...)\r\n         //    and the appropriate logic in the wallet is invoked.\r\n         // 2. Pasting from the clipboard an image, which the user has captured somehow.\r\n         //    The process of the image is virtually identical to the previous one, with the exception\r\n         //    that the QR code engine is applied to a static image instead of a video stream.\r\n         // 3. As part of the URL used to invoke the wallet. This is a special mechanism which is\r\n         //    tied to the particular URL of the wallet and should be used only in special circumstances.\r\n         //    If the URL specifies a QR then the wallet checks it and stores in local storage. Afterwards\r\n         //    it cleans the URL and reloads the app.\r\n\r\n         let params = new URL(globalThis.document.location.href).searchParams;\r\n\r\n         // Some verifiers (eg. EBSI), for some authentication flows, use redirections during the flow.\r\n         // We detect that this is the case by checking the URL\r\n         if (document.URL.includes(\"state=\") && document.URL.includes(\"auth-mock\")) {\r\n            mylog(\"Redirected with state:\", document.URL);\r\n            MHR.gotoPage(\"CredentialIssuance\", document.URL);\r\n            return;\r\n         }\r\n\r\n         if (document.URL.includes(\"code=\")) {\r\n            mylog(\"Redirected with code:\", document.URL);\r\n            MHR.gotoPage(\"CredentialIssuance\", document.URL);\r\n            return;\r\n         }\r\n\r\n         // This is an authentication request in the URL. Process and display it\r\n         let scope = params.get(\"scope\");\r\n         if (scope !== null) {\r\n            mylog(\"detected scope:\", scope);\r\n            MHR.gotoPage(\"AuthenticationRequestPage\", document.URL);\r\n            return;\r\n         }\r\n\r\n         // Check if we are authenticating\r\n         let request_uri = params.get(\"request_uri\");\r\n         if (request_uri) {\r\n            // Unescape the query parameter\r\n            request_uri = decodeURIComponent(request_uri);\r\n            mylog(\"MicroWallet request_uri\", request_uri);\r\n            MHR.gotoPage(\"AuthenticationRequestPage\", document.URL);\r\n            return;\r\n         }\r\n\r\n         // Check if we are in a credential issuance scenario\r\n         let credential_offer_uri = params.get(\"credential_offer_uri\");\r\n         if (credential_offer_uri) {\r\n            mylog(\"MicroWallet credential_offer_uri\", credential_offer_uri);\r\n            MHR.gotoPage(\"CredentialIssuance\", document.location.href);\r\n            return;\r\n         }\r\n\r\n         // The URL specifies a command\r\n         let command = params.get(\"command\");\r\n         if (command) {\r\n            mylog(\"MicroWallet command\", command);\r\n            switch (command) {\r\n               case \"getvc\":\r\n                  var vc_id = params.get(\"vcid\");\r\n                  await MHR.gotoPage(\"CredentialIssuance\", vc_id);\r\n                  return;\r\n\r\n               default:\r\n                  break;\r\n            }\r\n         }\r\n\r\n         // Retrieve all recent credentials from storage (all for the moment)\r\n         var credentials = await MHR.storage.credentialsGetAllRecent(-1);\r\n\r\n         // We should get a result even if it is an empty array (no credentials match)\r\n         // Otherwise, it is an error\r\n         if (!credentials) {\r\n            myerror(\"Error getting recent credentials\");\r\n            MHR.gotoPage(\"ErrorPage\", {\r\n               title: \"Error\",\r\n               msg: \"Error getting recent credentials\",\r\n            });\r\n            return;\r\n         }\r\n\r\n         if (debug) {\r\n            mylog(credentials);\r\n         }\r\n\r\n         // Pre-render each of the known credentials\r\n         const theDivs = [];\r\n\r\n         for (const vcraw of credentials) {\r\n            // For the moment, we only understand the credentials in the \"jwt_vc\" format\r\n            if (vcraw.type == \"jwt_vc\" || vcraw.type == \"jwt_vc_json\") {\r\n               console.log(vcraw);\r\n\r\n               // We use the hash of the credential as its unique ID\r\n               const currentId = vcraw.hash;\r\n\r\n               // Get the unencoded payload\r\n               const vc = vcraw.decoded;\r\n\r\n               const status = vcraw.status;\r\n\r\n               // Render the credential\r\n               const div = html`\r\n                  <ion-card>\r\n                     ${renderAnyCredentialCard(vc, vcraw.status)}\r\n\r\n                     <div class=\"ion-margin-start ion-margin-bottom\">\r\n                        <ion-button @click=${() => MHR.gotoPage(\"DisplayVC\", vcraw)}>\r\n                           <ion-icon slot=\"start\" name=\"construct\"></ion-icon>\r\n                           ${T(\"Details\")}\r\n                        </ion-button>\r\n\r\n                        <ion-button\r\n                           color=\"danger\"\r\n                           @click=${() => this.presentActionSheet(currentId)}\r\n                        >\r\n                           <ion-icon slot=\"start\" name=\"trash\"></ion-icon>\r\n                           ${T(\"Delete\")}\r\n                        </ion-button>\r\n                     </div>\r\n                  </ion-card>\r\n               `;\r\n\r\n               theDivs.push(div);\r\n            }\r\n         }\r\n\r\n         var theHtml;\r\n\r\n         if (theDivs.length > 0) {\r\n            theHtml = html`\r\n               <ion-grid>\r\n                  <ion-row>\r\n                     <ion-col size=\"6\">\r\n                        <ion-card class=\"scanbutton\">\r\n                           <ion-card-content>\r\n                              <h2>Use the camera to authenticate or receive a new credential.</h2>\r\n                           </ion-card-content>\r\n\r\n                           <div class=\"ion-margin-start ion-margin-bottom\">\r\n                              <ion-button @click=${() => MHR.gotoPage(\"ScanQrPage\")}>\r\n                                 <ion-icon slot=\"start\" name=\"camera\"></ion-icon>\r\n                                 ${T(\"Scan QR\")}\r\n                              </ion-button>\r\n                           </div>\r\n                        </ion-card>\r\n                     </ion-col>\r\n                     <ion-col size=\"6\">\r\n                        <ion-card class=\"scanbutton\">\r\n                           <ion-card-content>\r\n                              <h2>Paste a QR code image you captured from elsewhere.</h2>\r\n                           </ion-card-content>\r\n\r\n                           <div class=\"ion-margin-start ion-margin-bottom\">\r\n                              <ion-button @click=${() => pasteImage()}>\r\n                                 <ion-icon slot=\"start\" name=\"clipboard\"></ion-icon>\r\n                                 ${T(\"Paste QR\")}\r\n                              </ion-button>\r\n                           </div>\r\n                        </ion-card>\r\n                     </ion-col>\r\n                  </ion-row>\r\n               </ion-grid>\r\n\r\n               ${theDivs}\r\n\r\n               <ion-action-sheet\r\n                  id=\"mw_actionSheet\"\r\n                  @ionActionSheetDidDismiss=${(ev) => this.deleteVC(ev)}\r\n               >\r\n               </ion-action-sheet>\r\n            `;\r\n         } else {\r\n            mylog(\"No credentials\");\r\n\r\n            // We do not have a QR in the local storage\r\n            theHtml = html`\r\n\r\n               <ion-grid>\r\n                  <ion-row>\r\n                     <ion-col>\r\n                        <div class=\"text-title ion-text-center ion-padding\">The Wallet is empy</div>\r\n                        <div class=\"text-message ion-padding\">\r\n                           You need to obtain a Verifiable Credential from an Issuer, by scanning\r\n                           the QR in the screen of the Issuer page.\r\n                        </div>\r\n                     </ion-col>\r\n                  </ion-row>\r\n                  <ion-row>\r\n                     <ion-col size=\"6\">\r\n                        <ion-card class=\"scanbutton\">\r\n                           <ion-card-content>\r\n                              <h2>Use the camera to authenticate or receive a new credential.</h2>\r\n                           </ion-card-content>\r\n\r\n                           <div class=\"ion-margin-start ion-margin-bottom\">\r\n                              <ion-button @click=${() => MHR.gotoPage(\"ScanQrPage\")}>\r\n                                 <ion-icon slot=\"start\" name=\"camera\"></ion-icon>\r\n                                 ${T(\"Scan QR\")}\r\n                              </ion-button>\r\n                           </div>\r\n                        </ion-card>\r\n                     </ion-col>\r\n                     <ion-col size=\"6\">\r\n                        <ion-card class=\"scanbutton\">\r\n                           <ion-card-content>\r\n                              <h2>Paste a QR code image you captured from elsewhere.</h2>\r\n                           </ion-card-content>\r\n\r\n                           <div class=\"ion-margin-start ion-margin-bottom\">\r\n                              <ion-button @click=${() => pasteImage()}>\r\n                                 <ion-icon slot=\"start\" name=\"clipboard\"></ion-icon>\r\n                                 ${T(\"Paste QR\")}\r\n                              </ion-button>\r\n                           </div>\r\n                        </ion-card>\r\n                     </ion-col>\r\n                  </ion-row>\r\n               </ion-grid>\r\n            `;\r\n         }\r\n\r\n         this.render(theHtml, false);\r\n      }\r\n\r\n      /**\r\n       * @param {string} currentId\r\n       */\r\n      async presentActionSheet(currentId) {\r\n         const actionSheet = document.getElementById(\"mw_actionSheet\");\r\n         // @ts-ignore\r\n         actionSheet.header = \"Confirm to delete credential\";\r\n         // @ts-ignore\r\n         actionSheet.buttons = [\r\n            {\r\n               text: \"Delete\",\r\n               role: \"destructive\",\r\n               data: {\r\n                  action: \"delete\",\r\n               },\r\n            },\r\n            {\r\n               text: \"Cancel\",\r\n               role: \"cancel\",\r\n               data: {\r\n                  action: \"cancel\",\r\n               },\r\n            },\r\n         ];\r\n\r\n         this.credentialIdToDelete = currentId;\r\n         // @ts-ignore\r\n         await actionSheet.present();\r\n      }\r\n\r\n      async deleteVC(ev) {\r\n         // Delete only if event is delete\r\n         if (ev.detail.data) {\r\n            if (ev.detail.data.action == \"delete\") {\r\n               // Get the credential to delete\r\n               const currentId = this.credentialIdToDelete;\r\n               mylog(\"deleting credential\", currentId);\r\n               await MHR.storage.credentialsDelete(currentId);\r\n               MHR.goHome();\r\n               return;\r\n            }\r\n         }\r\n      }\r\n   }\r\n);\r\n\r\nasync function test_generateDIDKeyProof(subjectDID, issuerID, nonce) {\r\n   debugger;\r\n   const subjectKid = subjectDID.did;\r\n\r\n   // Create the headers of the JWT\r\n   var jwtHeaders = {\r\n      typ: \"openid4vci-proof+jwt\",\r\n      alg: \"ES256\",\r\n      kid: subjectKid,\r\n   };\r\n\r\n   // It expires in one day (it could be much shorter in many flows)\r\n   const iat = Math.floor(Date.now() / 1000) - 2;\r\n   const exp = iat + 86500;\r\n\r\n   // The issuer of the JWT is the person who will receive the Verifiable Credential at the end of the OID4VCI flow.\r\n   // This is why the 'iss' claim is set to the did:key of the Subject.\r\n   // The JWT is intended for the entity that is issuing the Verifiable Credential in the OID4VCI flow. This is the\r\n   // reason why the 'aud' claim is set to the did (whatever did method is used) of the VC Issuer.\r\n   var jwtPayload = {\r\n      // iss: subjectDID.did,\r\n      aud: issuerID,\r\n      iat: iat,\r\n      exp: exp,\r\n      nonce: nonce,\r\n   };\r\n\r\n   // The JWT is signed with the private key associated to the did:key of the creator of the JWT.\r\n   const jwt = await signJWT(jwtHeaders, jwtPayload, subjectDID.privateKey);\r\n\r\n   const ok = await verifyJWT(jwt, subjectDID.publicKey);\r\n\r\n   return jwt;\r\n}\r\n\r\nfunction base64ToBytes(base64) {\r\n   const binString = atob(base64);\r\n   return Uint8Array.from(binString, (m) => m.codePointAt(0));\r\n}\r\n\r\nvar in2Credential =\r\n   \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ik1JSFFNSUczcElHME1JR3hNU0l3SUFZRFZRUUREQmxFU1VkSlZFVk1JRlJUSUVGRVZrRk9RMFZFSUVOQklFY3lNUkl3RUFZRFZRUUZFd2xDTkRjME5EYzFOakF4S3pBcEJnTlZCQXNNSWtSSlIwbFVSVXdnVkZNZ1EwVlNWRWxHU1VOQlZFbFBUaUJCVlZSSVQxSkpWRmt4S0RBbUJnTlZCQW9NSDBSSlIwbFVSVXdnVDA0Z1ZGSlZVMVJGUkNCVFJWSldTVU5GVXlCVFRGVXhFekFSQmdOVkJBY01DbFpoYkd4aFpHOXNhV1F4Q3pBSkJnTlZCQVlUQWtWVEFoUWdhQUtFL3owd3paUzM5Y2J5SWZ1TGdrdHFHdz09IiwieDV0I1MyNTYiOiJIb0pEWGJzb2xaOTIwSWZHZWxqaEVFekxxOHZBTVBHTUZ4T2VRWUlIVEZnIiwieDVjIjpbIk1JSUcyVENDQk1HZ0F3SUJBZ0lVSUdnQ2hQODlNTTJVdC9YRzhpSDdpNEpMYWhzd0RRWUpLb1pJaHZjTkFRRU5CUUF3Z2JFeElqQWdCZ05WQkFNTUdVUkpSMGxVUlV3Z1ZGTWdRVVJXUVU1RFJVUWdRMEVnUnpJeEVqQVFCZ05WQkFVVENVSTBOelEwTnpVMk1ERXJNQ2tHQTFVRUN3d2lSRWxIU1ZSRlRDQlVVeUJEUlZKVVNVWkpRMEZVU1U5T0lFRlZWRWhQVWtsVVdURW9NQ1lHQTFVRUNnd2ZSRWxIU1ZSRlRDQlBUaUJVVWxWVFZFVkVJRk5GVWxaSlEwVlRJRk5NVlRFVE1CRUdBMVVFQnd3S1ZtRnNiR0ZrYjJ4cFpERUxNQWtHQTFVRUJoTUNSVk13SGhjTk1qVXdNekkzTURnek5UTTJXaGNOTWpnd016STJNRGd6TlRNMVdqQ0JtekUyTURRR0ExVUVBd3d0VTJWaGJDQlRhV2R1WVhSMWNtVWdRM0psWkdWdWRHbGhiSE1nYVc0Z1UwSllJR1p2Y2lCMFpYTjBhVzVuTVJnd0ZnWURWUVFGRXc5V1FWUkZVeTFDTmpBMk5EVTVNREF4R0RBV0JnTlZCR0VNRDFaQlZFVlRMVUkyTURZME5Ua3dNREVNTUFvR0ExVUVDZ3dEU1U0eU1SSXdFQVlEVlFRSERBbENZWEpqWld4dmJtRXhDekFKQmdOVkJBWVRBa1ZUTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFwSit6cEpPQnBCUzRtMUcwRkd6Ymx5WDRyQkp3bEM0WUxER2VKbHN4dkZpUXFzNDV2ZHNQYUdhMmNjaEl0aTNlTnlNWXI4SkU1aE9EUERneEY4bTViSGxxSTB1YVpCTnJaNXAxM3N2K0RwRjd1eVlNVXorQkl4dXQ4Ni9XdUYwdjlIM0pJbk1PTVN1STlIaWZ0aE11S25aeEc4NUEwU0ZhZllvL2xLTWR3akpKR2hJNkpYZit3YmVnemVIQVVHRDZmb2Z5Zm1IakxlZmcvVTNPYStnOVFNazNJT2syNzFISWloTkJXcHNjSzhnd1RPZTAyOFloQW12aTdEbENWNklVWnpDbjNSVTkxZHBtYjVOZkwwMUVzNG9ud2dXQjZ5YTJoR2J2ak4rd3ltSUFweG9JOVcrRE1wekJVazVtK1dDaUs4WnRNbE5KZXlnMnlDZ216TVlLOXdJREFRQUJvNElCK3pDQ0FmY3dEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU0NFNkdqQXBUT1lnM2dCclkzVmtGd1hFV3VLekIwQmdnckJnRUZCUWNCQVFSb01HWXdQZ1lJS3dZQkJRVUhNQUtHTW1oMGRIQTZMeTl3YTJrdVpHbG5hWFJsYkhSekxtVnpMMFJKUjBsVVJVeFVVMUZWUVV4SlJrbEZSRU5CUnpFdVkzSjBNQ1FHQ0NzR0FRVUZCekFCaGhob2RIUndPaTh2YjJOemNDNWthV2RwZEdWc2RITXVaWE13Z2F3R0ExVWRJQVNCcERDQm9UQ0JuZ1lMS3dZQkJBR0RwMUVLQWdFd2dZNHdQd1lJS3dZQkJRVUhBZ0VXTTJoMGRIQnpPaTh2Y0d0cExtUnBaMmwwWld4MGN5NWxjeTlrY0dNdlJFbEhTVlJGVEZSVFgwUlFReTUyTWk0eExuQmtaakJMQmdnckJnRUZCUWNDQWpBL0REMURaWEowYVdacFkyRmtieUJqZFdGc2FXWnBZMkZrYnlCa1pTQnpaV3hzYnlCaGRtRnVlbUZrYnlCa1pTQndaWEp6YjI1aElHcDFjbWxrYVdOaE1BOEdDU3NHQVFVRkJ6QUJCUVFDQlFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHQVFVRkJ3TUVNRUlHQTFVZEh3UTdNRGt3TjZBMW9ET0dNV2gwZEhBNkx5OWpjbXd4TG5CcmFTNWthV2RwZEdWc2RITXVaWE12UkZSVFVYVmhiR2xtYVdWa1EwRkhNUzVqY213d0hRWURWUjBPQkJZRUZIOVV6QVlVZ1VzSHh1Rk5qY20vSzRLS1hSenJNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU5CZ2txaGtpRzl3MEJBUTBGQUFPQ0FnRUFzdU8xMG9QdHJOMEFkc056MXErZ2lzMlZoVEYvM0E4TzkxL0o0R2dqNkhQM1VGa0pPQmRoRGsvWURlKytZSEo0M014d2kzZDJCeC92SHJnWDF3c25CVGwydUhmQ25xMDFZbWJla0s3TmZzbXlGc3R5blAxM3dsWm5SMGtvb0RUc3Z2aXFqRzliVlFWR0JoaDJqemFvMHMrRTJwM1gxUGhrNkRkZlNUTnBESklSL1Z3eTVBa0J0MWRoMjRvZjhKMjFVM3FVaWhDbmw0cVl6ZEkvcmV1Qi9lR25pMkc2Z0tlS2hzSUswejdzZkl6bGYrbW1wR0l2RFk4VExPV1dtWUttMHFEQTFDVU5tZ0tDdWZQa1V4dW92S3FxbXVKajhuZnJRL0hZSFh2UlJibktCVk0xZ2pmbnNmWURuaVRneUJxak8vK1U4UHZaOVZnVG04V2R5VjBFQ3h5YzVJMUV6ZDZtRHdROERaSGhjMWZ4Q2tnTGk4MGxPQ29zV1NseElORmExNWJIQjVIOGhtQTM3dmhxSzN6L3EwMW9VUTJiYnVqS3dpbFRXdXFhUUM0cGgrODkrRVY4UXNiM09nZWdtZElmZHBUWU5vS0M5YWNFZTJjbXh3MEhaK1RPamdqSHd0dWVYUTUyVUhIbTlncGpETllsNTFPSmU1NnpPZFQza2VJamtIcExKSGVYZHA5VnpaWnJGRVBySE14VzhaRkFjWDgweEkrM1EveXRqVnBZZlZUdkkwT2s5eXhuazh0R04xdFdiTVhOeTRENFhtUWlKMFhxR25DQWJNT2VGNDlzVld6RjRKNVY2Skpsa0U5eFZhU2s5eHRWOWxjcjlSenVTT1NYU0J4YlQwRHlnajJtMFFFT0taSzFYQ0ZmNllmRWxBd3o1dFltdU0rM2dZYz0iLCJNSUlHVlRDQ0JEMmdBd0lCQWdJVUU2cDNYV2FxVjh3aWRUMEdnRmVjcTlNYkhsNHdEUVlKS29aSWh2Y05BUUVOQlFBd2diRXhJakFnQmdOVkJBTU1HVVJKUjBsVVJVd2dWRk1nUVVSV1FVNURSVVFnUTBFZ1J6SXhFakFRQmdOVkJBVVRDVUkwTnpRME56VTJNREVyTUNrR0ExVUVDd3dpUkVsSFNWUkZUQ0JVVXlCRFJWSlVTVVpKUTBGVVNVOU9JRUZWVkVoUFVrbFVXVEVvTUNZR0ExVUVDZ3dmUkVsSFNWUkZUQ0JQVGlCVVVsVlRWRVZFSUZORlVsWkpRMFZUSUZOTVZURVRNQkVHQTFVRUJ3d0tWbUZzYkdGa2IyeHBaREVMTUFrR0ExVUVCaE1DUlZNd0hoY05NalF3TlRJNU1USXdNRFF3V2hjTk16Y3dOVEkyTVRJd01ETTVXakNCc1RFaU1DQUdBMVVFQXd3WlJFbEhTVlJGVENCVVV5QkJSRlpCVGtORlJDQkRRU0JITWpFU01CQUdBMVVFQlJNSlFqUTNORFEzTlRZd01Tc3dLUVlEVlFRTERDSkVTVWRKVkVWTUlGUlRJRU5GVWxSSlJrbERRVlJKVDA0Z1FWVlVTRTlTU1ZSWk1TZ3dKZ1lEVlFRS0RCOUVTVWRKVkVWTUlFOU9JRlJTVlZOVVJVUWdVMFZTVmtsRFJWTWdVMHhWTVJNd0VRWURWUVFIREFwV1lXeHNZV1J2Ykdsa01Rc3dDUVlEVlFRR0V3SkZVekNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNT1FhQkpHVW5Ldng0MEtaRDZFZXVZTVN4QUFjY3NIeU5KVzZxTW5rNjduT1BIQjk3Z2pSZ25zSnhlaFU4UVBneGhPYmhxN2tXYzAydlc4blFJUzJxeTcwSGpXK3k2SU1hT3RseWtzb05YT2N6UW9aQ25WcUJJaS9rRHNPaEZWMXJjRVhhaUJFVC9OdUlyU0t2R1lFSWR6QTlKYXFZZGZpL0pRL2xyWWF5RGZQM2Q3M2hzdXErbElqTjBkOWgrcEtjWXdML21JSWJLL2NRd2xsQVVtZGRyQXc5V0VtcWtsKzVSdURXcXBsRFdoaHZwR0pGUFh0NFJxS2dhYVZONVRVd1MyT0dKU05xQ3M2WkkrYVNkbmVUZ0NxcVEvLzgzaE45UXNtMG1CME44Tk85bHFTcENtUE9qWUdPVHA3SWs4aUI3dGV4MU9OeWVYTUhsOXpLRGNpcVYxNjJaUnBHdEptMnJ1ODZJVUNTalBsc3FUWE1uVzE0Mk1LdWdzVzNYNzFZMHF4M0RSVSszTHdnY0pxYU8xWS85RDJrUUVRSjN2NVplaUdRYXVSV3FmampBa0VSZ2grOG0zV1hYTHJuekFvRmhyUWRsQmExUTYxSTJVcWJxeGJBMGRTOUxkT3Q1K25GRlZabStFN0FBZVZ5cjhValZXVGRKUXZUTjN1cTBWa0wwbjJwcTAzK0hiNGdQUjh2cnBENzlKeWx5VWNJUjBRTklnTXRFRmU0ZUZKK2lDOSttYmVPanpIUWtsOFpHNTUxWDJLeTZzbDNPT25mOTNYZWRRRDB2RzByQ1lwUkdaKzUwazA1amx1S3pSamNpcUFDZ0xIQ0ZTcGNMeUJTS2dyWGNBMHFscFlEVEliZXg4OVR2UkdZMW5vd3JDNWxtR05UOGpKcnhDWU9ZREFnTUJBQUdqWXpCaE1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0h3WURWUjBqQkJnd0ZvQVVnaE9ob3dLVXptSU40QWEyTjFaQmNGeEZyaXN3SFFZRFZSME9CQllFRklJVG9hTUNsTTVpRGVBR3RqZFdRWEJjUmE0ck1BNEdBMVVkRHdFQi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRMEZBQU9DQWdFQUpHUUtyWjJVM0ovU3BHaFA3eldqdndlQlh4alc1dVNkeDBWN213djRtdkMyVmxDMVR2eEVuNXlWbmRFVUNwbEdwL20wUzNBMDdCdFBaMjRaU3VSdyttSXB0Qm1DaGJuVTF2ajJCRnBGRlRocHNRSkcwa0RqRDIzSG82cDNSdE1yaWI4SWkwUm5vVWJ3cFA1TjJMaWVPYnVvZDlPUzlxM01nQ2xoeTlGOTltT1d2RC9xNXZDVm8rdUxXWnVRNGFjdVRUTnhhNURIeWlqZ0IrR0dvMk9oSGxkclNwcCtMUmdVNWZrTktHMEx6aGxJRUdkRUJhbDBwdVovK1FxdFNyckxETVQ0WFBLV01KNmdwc3IzbFhmYmEwRWw3YmIvNzU2dE1ZQWJYem1ua2tVcWRpT0k1N3JWREZUOUZKeGpWZ281b1c4WE9LR1NMcU1IMzFYaUpDTm9INXJKWThWUTNabU1TdWg5N2tBQWhYdUZJYlFaN0Zya0YyeStHc0twYjBhOVpVcUZCckpsekh4Q0tsOFNTVHdmR0RnY3BlUFp4VUlJZ1BQY0k0b1h3Um9CMEhidDU0SXJSb0c3a1drNjhnWDJjaktWMFl0SG1WaEVFRnIzZGlaZk83bUFUQTU0c0xaWDluMWxvc25mOXhyZUV6ZEVZV2J5R1RoVXdsMzNNUDZYTGFGUlBkYm5Rc2hicm9lcHpnK25rc1U1VlZLMlpaRklXVlk2ZytSaElDWFZkaHFrQnBObStlSzArd1VDQTF0WFl5UktvU1VWcE1GU0FaaG5zeVVlWnphbVBIRGU0R2tUYW1NSzRxZlhLUU9iN0V0V1VXaDVmb1ZTemFxeXZGcHBVNFZNcC9nS3JQWUhENmJXckhKNXZDL0I3V3IvYVB0aE5rZ1hGTUdNclIwPSJdLCJ0eXAiOiJqb3NlIiwic2lnVCI6IjIwMjUtMDMtMzFUMDc6NTk6NTZaIiwiY3JpdCI6WyJzaWdUIl19.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlakw5cUZYRFY1cEZhOFRwZHg5OU1hblE4anBLRG5SVmpncmtmNHF2Z0YxWkEiLCJuYmYiOjE3NDM0MDc4OTksImlzcyI6ImRpZDplbHNpOlZBVEVTLUI2MDY0NTkwMCIsImV4cCI6MTc3NDk0Mzg5OSwiaWF0IjoxNzQzNDA3ODk5LCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvbnMvY3JlZGVudGlhbHMvdjIiLCJodHRwczovL3d3dy5kb21lLW1hcmtldHBsYWNlLmV1LzIwMjUvY3JlZGVudGlhbHMvbGVhcmNyZWRlbnRpYWxlbXBsb3llZS92MiJdLCJpZCI6IjNlYTdjYzU1LWVmYWItNDljNi1iOWM0LTVkMTlmMzM0MDc5MyIsInR5cGUiOlsiTEVBUkNyZWRlbnRpYWxFbXBsb3llZSIsIlZlcmlmaWFibGVDcmVkZW50aWFsIl0sImRlc2NyaXB0aW9uIjoiVmVyaWZpYWJsZSBDcmVkZW50aWFsIGZvciBlbXBsb3llZXMgb2YgYW4gb3JnYW5pemF0aW9uIiwiY3JlZGVudGlhbFN1YmplY3QiOnsibWFuZGF0ZSI6eyJpZCI6ImQxNWNiN2QzLTRlMzktNGM0Yi04MjRmLTQ5N2Q2YzY5MGUyMiIsIm1hbmRhdGVlIjp7ImlkIjoiZGlkOmtleTp6RG5hZWpMOXFGWERWNXBGYThUcGR4OTlNYW5ROGpwS0RuUlZqZ3JrZjRxdmdGMVpBIiwiZW1haWwiOiJoZXN1cy5ydWl6QGdtYWlsLmNvbSIsImZpcnN0TmFtZSI6IkpvaG4iLCJsYXN0TmFtZSI6IkRvZSIsIm5hdGlvbmFsaXR5IjoiU3BhbmlzaCJ9LCJtYW5kYXRvciI6eyJjb21tb25OYW1lIjoiSmVzdXMgUnVpeiIsImNvdW50cnkiOiJTcGFpbiIsImVtYWlsQWRkcmVzcyI6Implc3VzQGFsYXN0cmlhLmlvIiwib3JnYW5pemF0aW9uIjoiQWlyIFF1YWxpdHkgQ2xvdWQiLCJvcmdhbml6YXRpb25JZGVudGlmaWVyIjoiVkFURVMtQjM1NjY0ODc1In0sInBvd2VyIjpbeyJpZCI6IjRlYjk5YTM0LTVkNzUtNDYzYy05OWI4LWFmMjM0ZGUzMzRiMyIsImFjdGlvbiI6ImV4ZWN1dGUiLCJkb21haW4iOiJET01FIiwiZnVuY3Rpb24iOiJPbmJvYXJkaW5nIiwidHlwZSI6ImRvbWFpbiJ9XX19LCJpc3N1ZXIiOnsiaWQiOiJkaWQ6ZWxzaTpWQVRFUy1CNjA2NDU5MDAiLCJvcmdhbml6YXRpb25JZGVudGlmaWVyIjoiVkFURVMtQjYwNjQ1OTAwIiwib3JnYW5pemF0aW9uIjoiSU4yIiwiY291bnRyeSI6IkVTIiwiY29tbW9uTmFtZSI6IlNlYWwgU2lnbmF0dXJlIENyZWRlbnRpYWxzIGluIFNCWCBmb3IgdGVzdGluZyIsImVtYWlsQWRkcmVzcyI6Implc3VzQGFsYXN0cmlhLmlvIiwic2VyaWFsTnVtYmVyIjoiQjQ3NDQ3NTYwIn0sInZhbGlkRnJvbSI6IjIwMjUtMDMtMzFUMDc6NTg6MTkuMTMwNzU1MTQ5WiIsInZhbGlkVW50aWwiOiIyMDI2LTAzLTMxVDA3OjU4OjE5LjEzMDc1NTE0OVoifSwianRpIjoiNmM3NTFjOWMtYTI1Zi00OGYwLThlYTItMzQ0MmIyMmM3OTEzIn0.JA82hLs5pYAbMHB8VJjpIr4kBAjturxILKhKWCeDlNeU1q97IJCa3lYPVUmd2v0kWlx5OYYCiD445QYmSVQogPtt4hzOU1UAkgq_pmh0RaS8vcDf_RkqgzXx4I35zUsIJIa7nWfTUCIQYuRzlYbol4XgDKy-FIvUWUpWNG47U3Kg_-IYOXalX_v28N2WO_i7UQ_3kYi0bVzIfjIgmLC1948SMSQgEfkQoZVWIyu4Nf4s_6c_fBzHd_xN42R3kfudbt8Mvmwtobou2cGo2swzly8obhpe5VT7qW5IA2BsLNyB72654eMCmdew5rqgkpCGKNyn5uHCPUk2Zx8SGuymEg\";\r\n\r\nMHR.register(\r\n   \"SaveIN2Credential\",\r\n   class extends MHR.AbstractPage {\r\n      /**\r\n       * @param {string} id\r\n       */\r\n      constructor(id) {\r\n         super(id);\r\n      }\r\n\r\n      async enter() {\r\n         var decodedBody;\r\n\r\n         const decoded = decodeUnsafeJWT(in2Credential);\r\n\r\n         // Prepare for saving the credential in the local storage\r\n         var credStruct = {\r\n            type: \"jwt_vc_json\",\r\n            status: \"signed\",\r\n            encoded: in2Credential,\r\n            decoded: decoded.body?.vc,\r\n            id: decoded.body.jti,\r\n         };\r\n\r\n         // Save the credential, if there is no other one with the same id\r\n         var saved = await credentialsSave(credStruct, false);\r\n         if (!saved) {\r\n            return;\r\n         }\r\n\r\n         alert(\"Credential succesfully saved\");\r\n      }\r\n   }\r\n);\r\n\r\nfunction atobUrl(input) {\r\n   // Replace non-url compatible chars with base64 standard chars\r\n   input = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n   // Decode using the standard Javascript function\r\n   let bstr = decodeURIComponent(escape(atob(input)));\r\n\r\n   return bstr;\r\n}\r\n\r\nfunction btoaUrl(input) {\r\n   // Encode using the standard Javascript function\r\n   let astr = btoa(input);\r\n\r\n   // Replace non-url compatible chars with base64 standard chars\r\n   astr = astr.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\r\n\r\n   return astr;\r\n}\r\n\r\nasync function pasteImage() {\r\n   try {\r\n      const clipboardContents = await navigator.clipboard.read();\r\n      for (const item of clipboardContents) {\r\n         if (!item.types.includes(\"image/png\")) {\r\n            throw new Error(\"Clipboard does not contain PNG image data.\");\r\n         }\r\n         const blob = await item.getType(\"image/png\");\r\n         var destinationImage = URL.createObjectURL(blob);\r\n         const zxing = await import(\"@zxing/browser\");\r\n         const zxingReader = new zxing.BrowserQRCodeReader();\r\n         const resultImage = await zxingReader.decodeFromImageUrl(destinationImage);\r\n         mylog(resultImage.getText());\r\n         detectQRtype(resultImage.getText());\r\n      }\r\n   } catch (error) {\r\n      mylog(error.message);\r\n   }\r\n}\r\n\r\n// Try to detect the type of data received\r\n/**\r\n * @param {string} qrData\r\n */\r\nfunction detectQRtype(qrData) {\r\n   if (!qrData || !qrData.startsWith) {\r\n      myerror(\"detectQRtype: data is not string\");\r\n      this.showError(\"Error\", \"detectQRtype: data is not string\");\r\n      return;\r\n   }\r\n\r\n   if (qrData.startsWith(\"openid4vp:\")) {\r\n      // An Authentication Request, for Verifiable Presentation\r\n      mylog(\"Authentication Request\");\r\n      window.MHR.gotoPage(\"AuthenticationRequestPage\", qrData);\r\n      return;\r\n   } else if (qrData.startsWith(\"openid-credential-offer://\")) {\r\n      // An OpenID Credential Issuance\r\n      mylog(\"Credential Issuance\");\r\n      // Create a valid URL\r\n      qrData = qrData.replace(\"openid-credential-offer://\", \"https://www.example.com/\");\r\n      window.MHR.gotoPage(\"CredentialIssuance\", qrData);\r\n      return;\r\n   } else if (qrData.includes(\"credential_offer_uri=\")) {\r\n      mylog(\"Credential Issuance\");\r\n      // Create a valid URL\r\n      qrData = qrData.replace(\"openid-credential-offer://\", \"https://www.example.com/\");\r\n      window.MHR.gotoPage(\"CredentialIssuance\", qrData);\r\n      return;\r\n   } else if (qrData.startsWith(\"https\")) {\r\n      let params = new URL(qrData).searchParams;\r\n      let jar = params.get(\"jar\");\r\n      if (jar == \"yes\") {\r\n         mylog(\"Going to \", \"AuthenticationRequestPage\", qrData);\r\n         window.MHR.gotoPage(\"AuthenticationRequestPage\", qrData);\r\n         return;\r\n      }\r\n\r\n      // Normal QR with a URL where the real data is located\r\n      // We require secure connections with https, and do not accept http schemas\r\n      mylog(\"Going to \", this.displayPage);\r\n      window.MHR.gotoPage(this.displayPage, qrData);\r\n      return true;\r\n   } else {\r\n      myerror(\"detectQRtype: unrecognized QR code\");\r\n      this.showError(\"Error\", \"detectQRtype: unrecognized QR code\");\r\n      return;\r\n   }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
